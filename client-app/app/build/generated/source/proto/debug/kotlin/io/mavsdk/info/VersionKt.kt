// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/info/info.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.info;

@kotlin.jvm.JvmName("-initializeversion")
public inline fun version(block: io.mavsdk.info.VersionKt.Dsl.() -> kotlin.Unit): io.mavsdk.info.InfoProto.Version =
  io.mavsdk.info.VersionKt.Dsl._create(io.mavsdk.info.InfoProto.Version.newBuilder()).apply { block() }._build()
/**
 * ```
 * System version information.
 * ```
 *
 * Protobuf type `mavsdk.rpc.info.Version`
 */
public object VersionKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.info.InfoProto.Version.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.info.InfoProto.Version.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.info.InfoProto.Version = _builder.build()

    /**
     * <pre>
     * Flight software major version
     * </pre>
     *
     * <code>int32 flight_sw_major = 1;</code>
     */
    public var flightSwMajor: kotlin.Int
      @JvmName("getFlightSwMajor")
      get() = _builder.getFlightSwMajor()
      @JvmName("setFlightSwMajor")
      set(value) {
        _builder.setFlightSwMajor(value)
      }
    /**
     * ```
     * Flight software major version
     * ```
     *
     * `int32 flight_sw_major = 1;`
     */
    public fun clearFlightSwMajor() {
      _builder.clearFlightSwMajor()
    }

    /**
     * <pre>
     * Flight software minor version
     * </pre>
     *
     * <code>int32 flight_sw_minor = 2;</code>
     */
    public var flightSwMinor: kotlin.Int
      @JvmName("getFlightSwMinor")
      get() = _builder.getFlightSwMinor()
      @JvmName("setFlightSwMinor")
      set(value) {
        _builder.setFlightSwMinor(value)
      }
    /**
     * ```
     * Flight software minor version
     * ```
     *
     * `int32 flight_sw_minor = 2;`
     */
    public fun clearFlightSwMinor() {
      _builder.clearFlightSwMinor()
    }

    /**
     * <pre>
     * Flight software patch version
     * </pre>
     *
     * <code>int32 flight_sw_patch = 3;</code>
     */
    public var flightSwPatch: kotlin.Int
      @JvmName("getFlightSwPatch")
      get() = _builder.getFlightSwPatch()
      @JvmName("setFlightSwPatch")
      set(value) {
        _builder.setFlightSwPatch(value)
      }
    /**
     * ```
     * Flight software patch version
     * ```
     *
     * `int32 flight_sw_patch = 3;`
     */
    public fun clearFlightSwPatch() {
      _builder.clearFlightSwPatch()
    }

    /**
     * <pre>
     * Flight software vendor major version
     * </pre>
     *
     * <code>int32 flight_sw_vendor_major = 4;</code>
     */
    public var flightSwVendorMajor: kotlin.Int
      @JvmName("getFlightSwVendorMajor")
      get() = _builder.getFlightSwVendorMajor()
      @JvmName("setFlightSwVendorMajor")
      set(value) {
        _builder.setFlightSwVendorMajor(value)
      }
    /**
     * ```
     * Flight software vendor major version
     * ```
     *
     * `int32 flight_sw_vendor_major = 4;`
     */
    public fun clearFlightSwVendorMajor() {
      _builder.clearFlightSwVendorMajor()
    }

    /**
     * <pre>
     * Flight software vendor minor version
     * </pre>
     *
     * <code>int32 flight_sw_vendor_minor = 5;</code>
     */
    public var flightSwVendorMinor: kotlin.Int
      @JvmName("getFlightSwVendorMinor")
      get() = _builder.getFlightSwVendorMinor()
      @JvmName("setFlightSwVendorMinor")
      set(value) {
        _builder.setFlightSwVendorMinor(value)
      }
    /**
     * ```
     * Flight software vendor minor version
     * ```
     *
     * `int32 flight_sw_vendor_minor = 5;`
     */
    public fun clearFlightSwVendorMinor() {
      _builder.clearFlightSwVendorMinor()
    }

    /**
     * <pre>
     * Flight software vendor patch version
     * </pre>
     *
     * <code>int32 flight_sw_vendor_patch = 6;</code>
     */
    public var flightSwVendorPatch: kotlin.Int
      @JvmName("getFlightSwVendorPatch")
      get() = _builder.getFlightSwVendorPatch()
      @JvmName("setFlightSwVendorPatch")
      set(value) {
        _builder.setFlightSwVendorPatch(value)
      }
    /**
     * ```
     * Flight software vendor patch version
     * ```
     *
     * `int32 flight_sw_vendor_patch = 6;`
     */
    public fun clearFlightSwVendorPatch() {
      _builder.clearFlightSwVendorPatch()
    }

    /**
     * <pre>
     * Operating system software major version
     * </pre>
     *
     * <code>int32 os_sw_major = 7;</code>
     */
    public var osSwMajor: kotlin.Int
      @JvmName("getOsSwMajor")
      get() = _builder.getOsSwMajor()
      @JvmName("setOsSwMajor")
      set(value) {
        _builder.setOsSwMajor(value)
      }
    /**
     * ```
     * Operating system software major version
     * ```
     *
     * `int32 os_sw_major = 7;`
     */
    public fun clearOsSwMajor() {
      _builder.clearOsSwMajor()
    }

    /**
     * <pre>
     * Operating system software minor version
     * </pre>
     *
     * <code>int32 os_sw_minor = 8;</code>
     */
    public var osSwMinor: kotlin.Int
      @JvmName("getOsSwMinor")
      get() = _builder.getOsSwMinor()
      @JvmName("setOsSwMinor")
      set(value) {
        _builder.setOsSwMinor(value)
      }
    /**
     * ```
     * Operating system software minor version
     * ```
     *
     * `int32 os_sw_minor = 8;`
     */
    public fun clearOsSwMinor() {
      _builder.clearOsSwMinor()
    }

    /**
     * <pre>
     * Operating system software patch version
     * </pre>
     *
     * <code>int32 os_sw_patch = 9;</code>
     */
    public var osSwPatch: kotlin.Int
      @JvmName("getOsSwPatch")
      get() = _builder.getOsSwPatch()
      @JvmName("setOsSwPatch")
      set(value) {
        _builder.setOsSwPatch(value)
      }
    /**
     * ```
     * Operating system software patch version
     * ```
     *
     * `int32 os_sw_patch = 9;`
     */
    public fun clearOsSwPatch() {
      _builder.clearOsSwPatch()
    }

    /**
     * ```
     * Flight software git hash
     * ```
     *
     * `string flight_sw_git_hash = 10;`
     */
    public var flightSwGitHash: kotlin.String
      @JvmName("getFlightSwGitHash")
      get() = _builder.getFlightSwGitHash()
      @JvmName("setFlightSwGitHash")
      set(value) {
        _builder.setFlightSwGitHash(value)
      }
    /**
     * ```
     * Flight software git hash
     * ```
     *
     * `string flight_sw_git_hash = 10;`
     */
    public fun clearFlightSwGitHash() {
      _builder.clearFlightSwGitHash()
    }

    /**
     * ```
     * Operating system software git hash
     * ```
     *
     * `string os_sw_git_hash = 11;`
     */
    public var osSwGitHash: kotlin.String
      @JvmName("getOsSwGitHash")
      get() = _builder.getOsSwGitHash()
      @JvmName("setOsSwGitHash")
      set(value) {
        _builder.setOsSwGitHash(value)
      }
    /**
     * ```
     * Operating system software git hash
     * ```
     *
     * `string os_sw_git_hash = 11;`
     */
    public fun clearOsSwGitHash() {
      _builder.clearOsSwGitHash()
    }

    /**
     * ```
     * Flight software version type
     * ```
     *
     * `.mavsdk.rpc.info.Version.FlightSoftwareVersionType flight_sw_version_type = 12;`
     */
    public var flightSwVersionType: io.mavsdk.info.InfoProto.Version.FlightSoftwareVersionType
      @JvmName("getFlightSwVersionType")
      get() = _builder.getFlightSwVersionType()
      @JvmName("setFlightSwVersionType")
      set(value) {
        _builder.setFlightSwVersionType(value)
      }
    public var flightSwVersionTypeValue: kotlin.Int
      @JvmName("getFlightSwVersionTypeValue")
      get() = _builder.getFlightSwVersionTypeValue()
      @JvmName("setFlightSwVersionTypeValue")
      set(value) {
        _builder.setFlightSwVersionTypeValue(value)
      }
    /**
     * ```
     * Flight software version type
     * ```
     *
     * `.mavsdk.rpc.info.Version.FlightSoftwareVersionType flight_sw_version_type = 12;`
     */
    public fun clearFlightSwVersionType() {
      _builder.clearFlightSwVersionType()
    }
  }
}
public inline fun io.mavsdk.info.InfoProto.Version.copy(block: `io.mavsdk.info`.VersionKt.Dsl.() -> kotlin.Unit): io.mavsdk.info.InfoProto.Version =
  `io.mavsdk.info`.VersionKt.Dsl._create(this.toBuilder()).apply { block() }._build()

