// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/camera_server/camera_server.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.camera_server;

@kotlin.jvm.JvmName("-initializecaptureStatus")
public inline fun captureStatus(block: io.mavsdk.camera_server.CaptureStatusKt.Dsl.() -> kotlin.Unit): io.mavsdk.camera_server.CameraServerProto.CaptureStatus =
  io.mavsdk.camera_server.CaptureStatusKt.Dsl._create(io.mavsdk.camera_server.CameraServerProto.CaptureStatus.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `mavsdk.rpc.camera_server.CaptureStatus`
 */
public object CaptureStatusKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.camera_server.CameraServerProto.CaptureStatus.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.camera_server.CameraServerProto.CaptureStatus.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.camera_server.CameraServerProto.CaptureStatus = _builder.build()

    /**
     * <pre>
     * Image capture interval (in s)
     * </pre>
     *
     * <code>float image_interval_s = 1;</code>
     */
    public var imageIntervalS: kotlin.Float
      @JvmName("getImageIntervalS")
      get() = _builder.getImageIntervalS()
      @JvmName("setImageIntervalS")
      set(value) {
        _builder.setImageIntervalS(value)
      }
    /**
     * ```
     * Image capture interval (in s)
     * ```
     *
     * `float image_interval_s = 1;`
     */
    public fun clearImageIntervalS() {
      _builder.clearImageIntervalS()
    }

    /**
     * <pre>
     * Elapsed time since recording started (in s)
     * </pre>
     *
     * <code>float recording_time_s = 2;</code>
     */
    public var recordingTimeS: kotlin.Float
      @JvmName("getRecordingTimeS")
      get() = _builder.getRecordingTimeS()
      @JvmName("setRecordingTimeS")
      set(value) {
        _builder.setRecordingTimeS(value)
      }
    /**
     * ```
     * Elapsed time since recording started (in s)
     * ```
     *
     * `float recording_time_s = 2;`
     */
    public fun clearRecordingTimeS() {
      _builder.clearRecordingTimeS()
    }

    /**
     * <pre>
     * Available storage capacity. (in MiB)
     * </pre>
     *
     * <code>float available_capacity_mib = 3;</code>
     */
    public var availableCapacityMib: kotlin.Float
      @JvmName("getAvailableCapacityMib")
      get() = _builder.getAvailableCapacityMib()
      @JvmName("setAvailableCapacityMib")
      set(value) {
        _builder.setAvailableCapacityMib(value)
      }
    /**
     * ```
     * Available storage capacity. (in MiB)
     * ```
     *
     * `float available_capacity_mib = 3;`
     */
    public fun clearAvailableCapacityMib() {
      _builder.clearAvailableCapacityMib()
    }

    /**
     * ```
     * Current status of image capturing
     * ```
     *
     * `.mavsdk.rpc.camera_server.CaptureStatus.ImageStatus image_status = 4;`
     */
    public var imageStatus: io.mavsdk.camera_server.CameraServerProto.CaptureStatus.ImageStatus
      @JvmName("getImageStatus")
      get() = _builder.getImageStatus()
      @JvmName("setImageStatus")
      set(value) {
        _builder.setImageStatus(value)
      }
    public var imageStatusValue: kotlin.Int
      @JvmName("getImageStatusValue")
      get() = _builder.getImageStatusValue()
      @JvmName("setImageStatusValue")
      set(value) {
        _builder.setImageStatusValue(value)
      }
    /**
     * ```
     * Current status of image capturing
     * ```
     *
     * `.mavsdk.rpc.camera_server.CaptureStatus.ImageStatus image_status = 4;`
     */
    public fun clearImageStatus() {
      _builder.clearImageStatus()
    }

    /**
     * ```
     * Current status of video capturing
     * ```
     *
     * `.mavsdk.rpc.camera_server.CaptureStatus.VideoStatus video_status = 5;`
     */
    public var videoStatus: io.mavsdk.camera_server.CameraServerProto.CaptureStatus.VideoStatus
      @JvmName("getVideoStatus")
      get() = _builder.getVideoStatus()
      @JvmName("setVideoStatus")
      set(value) {
        _builder.setVideoStatus(value)
      }
    public var videoStatusValue: kotlin.Int
      @JvmName("getVideoStatusValue")
      get() = _builder.getVideoStatusValue()
      @JvmName("setVideoStatusValue")
      set(value) {
        _builder.setVideoStatusValue(value)
      }
    /**
     * ```
     * Current status of video capturing
     * ```
     *
     * `.mavsdk.rpc.camera_server.CaptureStatus.VideoStatus video_status = 5;`
     */
    public fun clearVideoStatus() {
      _builder.clearVideoStatus()
    }

    /**
     * <pre>
     * Total number of images captured ('forever', or until reset using MAV_CMD_STORAGE_FORMAT)
     * </pre>
     *
     * <code>int32 image_count = 6;</code>
     */
    public var imageCount: kotlin.Int
      @JvmName("getImageCount")
      get() = _builder.getImageCount()
      @JvmName("setImageCount")
      set(value) {
        _builder.setImageCount(value)
      }
    /**
     * ```
     * Total number of images captured ('forever', or until reset using MAV_CMD_STORAGE_FORMAT)
     * ```
     *
     * `int32 image_count = 6;`
     */
    public fun clearImageCount() {
      _builder.clearImageCount()
    }
  }
}
public inline fun io.mavsdk.camera_server.CameraServerProto.CaptureStatus.copy(block: `io.mavsdk.camera_server`.CaptureStatusKt.Dsl.() -> kotlin.Unit): io.mavsdk.camera_server.CameraServerProto.CaptureStatus =
  `io.mavsdk.camera_server`.CaptureStatusKt.Dsl._create(this.toBuilder()).apply { block() }._build()

