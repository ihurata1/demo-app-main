// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/telemetry/telemetry.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.telemetry;

@kotlin.jvm.JvmName("-initializealtitude")
public inline fun altitude(block: io.mavsdk.telemetry.AltitudeKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry.TelemetryProto.Altitude =
  io.mavsdk.telemetry.AltitudeKt.Dsl._create(io.mavsdk.telemetry.TelemetryProto.Altitude.newBuilder()).apply { block() }._build()
/**
 * ```
 * Altitude message type
 * ```
 *
 * Protobuf type `mavsdk.rpc.telemetry.Altitude`
 */
public object AltitudeKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.telemetry.TelemetryProto.Altitude.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.telemetry.TelemetryProto.Altitude.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.telemetry.TelemetryProto.Altitude = _builder.build()

    /**
     * <pre>
     * Altitude in meters is initialized on system boot and monotonic
     * </pre>
     *
     * <code>float altitude_monotonic_m = 1 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var altitudeMonotonicM: kotlin.Float
      @JvmName("getAltitudeMonotonicM")
      get() = _builder.getAltitudeMonotonicM()
      @JvmName("setAltitudeMonotonicM")
      set(value) {
        _builder.setAltitudeMonotonicM(value)
      }
    /**
     * ```
     * Altitude in meters is initialized on system boot and monotonic
     * ```
     *
     * `float altitude_monotonic_m = 1 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearAltitudeMonotonicM() {
      _builder.clearAltitudeMonotonicM()
    }

    /**
     * <pre>
     *  Altitude AMSL (above mean sea level) in meters
     * </pre>
     *
     * <code>float altitude_amsl_m = 2 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var altitudeAmslM: kotlin.Float
      @JvmName("getAltitudeAmslM")
      get() = _builder.getAltitudeAmslM()
      @JvmName("setAltitudeAmslM")
      set(value) {
        _builder.setAltitudeAmslM(value)
      }
    /**
     * ```
     *  Altitude AMSL (above mean sea level) in meters
     * ```
     *
     * `float altitude_amsl_m = 2 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearAltitudeAmslM() {
      _builder.clearAltitudeAmslM()
    }

    /**
     * <pre>
     * Local altitude in meters
     * </pre>
     *
     * <code>float altitude_local_m = 3 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var altitudeLocalM: kotlin.Float
      @JvmName("getAltitudeLocalM")
      get() = _builder.getAltitudeLocalM()
      @JvmName("setAltitudeLocalM")
      set(value) {
        _builder.setAltitudeLocalM(value)
      }
    /**
     * ```
     * Local altitude in meters
     * ```
     *
     * `float altitude_local_m = 3 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearAltitudeLocalM() {
      _builder.clearAltitudeLocalM()
    }

    /**
     * <pre>
     * Altitude above home position in meters
     * </pre>
     *
     * <code>float altitude_relative_m = 4 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var altitudeRelativeM: kotlin.Float
      @JvmName("getAltitudeRelativeM")
      get() = _builder.getAltitudeRelativeM()
      @JvmName("setAltitudeRelativeM")
      set(value) {
        _builder.setAltitudeRelativeM(value)
      }
    /**
     * ```
     * Altitude above home position in meters
     * ```
     *
     * `float altitude_relative_m = 4 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearAltitudeRelativeM() {
      _builder.clearAltitudeRelativeM()
    }

    /**
     * <pre>
     * Altitude above terrain in meters
     * </pre>
     *
     * <code>float altitude_terrain_m = 5 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var altitudeTerrainM: kotlin.Float
      @JvmName("getAltitudeTerrainM")
      get() = _builder.getAltitudeTerrainM()
      @JvmName("setAltitudeTerrainM")
      set(value) {
        _builder.setAltitudeTerrainM(value)
      }
    /**
     * ```
     * Altitude above terrain in meters
     * ```
     *
     * `float altitude_terrain_m = 5 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearAltitudeTerrainM() {
      _builder.clearAltitudeTerrainM()
    }

    /**
     * <pre>
     * This is not the altitude, but the clear space below the system according to the fused clearance estimate in meters.
     * </pre>
     *
     * <code>float bottom_clearance_m = 6 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var bottomClearanceM: kotlin.Float
      @JvmName("getBottomClearanceM")
      get() = _builder.getBottomClearanceM()
      @JvmName("setBottomClearanceM")
      set(value) {
        _builder.setBottomClearanceM(value)
      }
    /**
     * ```
     * This is not the altitude, but the clear space below the system according to the fused clearance estimate in meters.
     * ```
     *
     * `float bottom_clearance_m = 6 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearBottomClearanceM() {
      _builder.clearBottomClearanceM()
    }
  }
}
public inline fun io.mavsdk.telemetry.TelemetryProto.Altitude.copy(block: `io.mavsdk.telemetry`.AltitudeKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry.TelemetryProto.Altitude =
  `io.mavsdk.telemetry`.AltitudeKt.Dsl._create(this.toBuilder()).apply { block() }._build()

