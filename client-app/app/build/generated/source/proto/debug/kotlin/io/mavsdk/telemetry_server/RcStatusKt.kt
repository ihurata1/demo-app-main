// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/telemetry_server/telemetry_server.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.telemetry_server;

@kotlin.jvm.JvmName("-initializercStatus")
public inline fun rcStatus(block: io.mavsdk.telemetry_server.RcStatusKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry_server.TelemetryServerProto.RcStatus =
  io.mavsdk.telemetry_server.RcStatusKt.Dsl._create(io.mavsdk.telemetry_server.TelemetryServerProto.RcStatus.newBuilder()).apply { block() }._build()
/**
 * ```
 * Remote control status type.
 * ```
 *
 * Protobuf type `mavsdk.rpc.telemetry_server.RcStatus`
 */
public object RcStatusKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.telemetry_server.TelemetryServerProto.RcStatus.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.telemetry_server.TelemetryServerProto.RcStatus.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.telemetry_server.TelemetryServerProto.RcStatus = _builder.build()

    /**
     * <pre>
     * True if an RC signal has been available once
     * </pre>
     *
     * <code>bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];</code>
     */
    public var wasAvailableOnce: kotlin.Boolean
      @JvmName("getWasAvailableOnce")
      get() = _builder.getWasAvailableOnce()
      @JvmName("setWasAvailableOnce")
      set(value) {
        _builder.setWasAvailableOnce(value)
      }
    /**
     * ```
     * True if an RC signal has been available once
     * ```
     *
     * `bool was_available_once = 1 [(.mavsdk.options.default_value) = "false"];`
     */
    public fun clearWasAvailableOnce() {
      _builder.clearWasAvailableOnce()
    }

    /**
     * <pre>
     * True if the RC signal is available now
     * </pre>
     *
     * <code>bool is_available = 2 [(.mavsdk.options.default_value) = "false"];</code>
     */
    public var isAvailable: kotlin.Boolean
      @JvmName("getIsAvailable")
      get() = _builder.getIsAvailable()
      @JvmName("setIsAvailable")
      set(value) {
        _builder.setIsAvailable(value)
      }
    /**
     * ```
     * True if the RC signal is available now
     * ```
     *
     * `bool is_available = 2 [(.mavsdk.options.default_value) = "false"];`
     */
    public fun clearIsAvailable() {
      _builder.clearIsAvailable()
    }

    /**
     * <pre>
     * Signal strength (range: 0 to 100, NaN if unknown)
     * </pre>
     *
     * <code>float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var signalStrengthPercent: kotlin.Float
      @JvmName("getSignalStrengthPercent")
      get() = _builder.getSignalStrengthPercent()
      @JvmName("setSignalStrengthPercent")
      set(value) {
        _builder.setSignalStrengthPercent(value)
      }
    /**
     * ```
     * Signal strength (range: 0 to 100, NaN if unknown)
     * ```
     *
     * `float signal_strength_percent = 3 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearSignalStrengthPercent() {
      _builder.clearSignalStrengthPercent()
    }
  }
}
public inline fun io.mavsdk.telemetry_server.TelemetryServerProto.RcStatus.copy(block: `io.mavsdk.telemetry_server`.RcStatusKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry_server.TelemetryServerProto.RcStatus =
  `io.mavsdk.telemetry_server`.RcStatusKt.Dsl._create(this.toBuilder()).apply { block() }._build()

