// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/mocap/mocap.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.mocap;

@kotlin.jvm.JvmName("-initializeodometry")
public inline fun odometry(block: io.mavsdk.mocap.OdometryKt.Dsl.() -> kotlin.Unit): io.mavsdk.mocap.MocapProto.Odometry =
  io.mavsdk.mocap.OdometryKt.Dsl._create(io.mavsdk.mocap.MocapProto.Odometry.newBuilder()).apply { block() }._build()
/**
 * ```
 * Odometry message to communicate odometry information with an external interface.
 * ```
 *
 * Protobuf type `mavsdk.rpc.mocap.Odometry`
 */
public object OdometryKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.mocap.MocapProto.Odometry.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.mocap.MocapProto.Odometry.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.mocap.MocapProto.Odometry = _builder.build()

    /**
     * <pre>
     * Timestamp (0 to use Backend timestamp).
     * </pre>
     *
     * <code>uint64 time_usec = 1;</code>
     */
    public var timeUsec: kotlin.Long
      @JvmName("getTimeUsec")
      get() = _builder.getTimeUsec()
      @JvmName("setTimeUsec")
      set(value) {
        _builder.setTimeUsec(value)
      }
    /**
     * ```
     * Timestamp (0 to use Backend timestamp).
     * ```
     *
     * `uint64 time_usec = 1;`
     */
    public fun clearTimeUsec() {
      _builder.clearTimeUsec()
    }

    /**
     * ```
     * Coordinate frame of reference for the pose data.
     * ```
     *
     * `.mavsdk.rpc.mocap.Odometry.MavFrame frame_id = 2;`
     */
    public var frameId: io.mavsdk.mocap.MocapProto.Odometry.MavFrame
      @JvmName("getFrameId")
      get() = _builder.getFrameId()
      @JvmName("setFrameId")
      set(value) {
        _builder.setFrameId(value)
      }
    public var frameIdValue: kotlin.Int
      @JvmName("getFrameIdValue")
      get() = _builder.getFrameIdValue()
      @JvmName("setFrameIdValue")
      set(value) {
        _builder.setFrameIdValue(value)
      }
    /**
     * ```
     * Coordinate frame of reference for the pose data.
     * ```
     *
     * `.mavsdk.rpc.mocap.Odometry.MavFrame frame_id = 2;`
     */
    public fun clearFrameId() {
      _builder.clearFrameId()
    }

    /**
     * ```
     * Body Position.
     * ```
     *
     * `.mavsdk.rpc.mocap.PositionBody position_body = 3;`
     */
    public var positionBody: io.mavsdk.mocap.MocapProto.PositionBody
      @JvmName("getPositionBody")
      get() = _builder.getPositionBody()
      @JvmName("setPositionBody")
      set(value) {
        _builder.setPositionBody(value)
      }
    /**
     * ```
     * Body Position.
     * ```
     *
     * `.mavsdk.rpc.mocap.PositionBody position_body = 3;`
     */
    public fun clearPositionBody() {
      _builder.clearPositionBody()
    }
    /**
     * ```
     * Body Position.
     * ```
     *
     * `.mavsdk.rpc.mocap.PositionBody position_body = 3;`
     * @return Whether the positionBody field is set.
     */
    public fun hasPositionBody(): kotlin.Boolean {
      return _builder.hasPositionBody()
    }

    /**
     * ```
     * Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation).
     * ```
     *
     * `.mavsdk.rpc.mocap.Quaternion q = 4;`
     */
    public var q: io.mavsdk.mocap.MocapProto.Quaternion
      @JvmName("getQ")
      get() = _builder.getQ()
      @JvmName("setQ")
      set(value) {
        _builder.setQ(value)
      }
    /**
     * ```
     * Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation).
     * ```
     *
     * `.mavsdk.rpc.mocap.Quaternion q = 4;`
     */
    public fun clearQ() {
      _builder.clearQ()
    }
    /**
     * ```
     * Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation).
     * ```
     *
     * `.mavsdk.rpc.mocap.Quaternion q = 4;`
     * @return Whether the q field is set.
     */
    public fun hasQ(): kotlin.Boolean {
      return _builder.hasQ()
    }

    /**
     * ```
     * Linear speed (m/s).
     * ```
     *
     * `.mavsdk.rpc.mocap.SpeedBody speed_body = 5;`
     */
    public var speedBody: io.mavsdk.mocap.MocapProto.SpeedBody
      @JvmName("getSpeedBody")
      get() = _builder.getSpeedBody()
      @JvmName("setSpeedBody")
      set(value) {
        _builder.setSpeedBody(value)
      }
    /**
     * ```
     * Linear speed (m/s).
     * ```
     *
     * `.mavsdk.rpc.mocap.SpeedBody speed_body = 5;`
     */
    public fun clearSpeedBody() {
      _builder.clearSpeedBody()
    }
    /**
     * ```
     * Linear speed (m/s).
     * ```
     *
     * `.mavsdk.rpc.mocap.SpeedBody speed_body = 5;`
     * @return Whether the speedBody field is set.
     */
    public fun hasSpeedBody(): kotlin.Boolean {
      return _builder.hasSpeedBody()
    }

    /**
     * ```
     * Angular speed (rad/s).
     * ```
     *
     * `.mavsdk.rpc.mocap.AngularVelocityBody angular_velocity_body = 6;`
     */
    public var angularVelocityBody: io.mavsdk.mocap.MocapProto.AngularVelocityBody
      @JvmName("getAngularVelocityBody")
      get() = _builder.getAngularVelocityBody()
      @JvmName("setAngularVelocityBody")
      set(value) {
        _builder.setAngularVelocityBody(value)
      }
    /**
     * ```
     * Angular speed (rad/s).
     * ```
     *
     * `.mavsdk.rpc.mocap.AngularVelocityBody angular_velocity_body = 6;`
     */
    public fun clearAngularVelocityBody() {
      _builder.clearAngularVelocityBody()
    }
    /**
     * ```
     * Angular speed (rad/s).
     * ```
     *
     * `.mavsdk.rpc.mocap.AngularVelocityBody angular_velocity_body = 6;`
     * @return Whether the angularVelocityBody field is set.
     */
    public fun hasAngularVelocityBody(): kotlin.Boolean {
      return _builder.hasAngularVelocityBody()
    }

    /**
     * ```
     * Pose cross-covariance matrix.
     * ```
     *
     * `.mavsdk.rpc.mocap.Covariance pose_covariance = 7;`
     */
    public var poseCovariance: io.mavsdk.mocap.MocapProto.Covariance
      @JvmName("getPoseCovariance")
      get() = _builder.getPoseCovariance()
      @JvmName("setPoseCovariance")
      set(value) {
        _builder.setPoseCovariance(value)
      }
    /**
     * ```
     * Pose cross-covariance matrix.
     * ```
     *
     * `.mavsdk.rpc.mocap.Covariance pose_covariance = 7;`
     */
    public fun clearPoseCovariance() {
      _builder.clearPoseCovariance()
    }
    /**
     * ```
     * Pose cross-covariance matrix.
     * ```
     *
     * `.mavsdk.rpc.mocap.Covariance pose_covariance = 7;`
     * @return Whether the poseCovariance field is set.
     */
    public fun hasPoseCovariance(): kotlin.Boolean {
      return _builder.hasPoseCovariance()
    }

    /**
     * ```
     * Velocity cross-covariance matrix.
     * ```
     *
     * `.mavsdk.rpc.mocap.Covariance velocity_covariance = 8;`
     */
    public var velocityCovariance: io.mavsdk.mocap.MocapProto.Covariance
      @JvmName("getVelocityCovariance")
      get() = _builder.getVelocityCovariance()
      @JvmName("setVelocityCovariance")
      set(value) {
        _builder.setVelocityCovariance(value)
      }
    /**
     * ```
     * Velocity cross-covariance matrix.
     * ```
     *
     * `.mavsdk.rpc.mocap.Covariance velocity_covariance = 8;`
     */
    public fun clearVelocityCovariance() {
      _builder.clearVelocityCovariance()
    }
    /**
     * ```
     * Velocity cross-covariance matrix.
     * ```
     *
     * `.mavsdk.rpc.mocap.Covariance velocity_covariance = 8;`
     * @return Whether the velocityCovariance field is set.
     */
    public fun hasVelocityCovariance(): kotlin.Boolean {
      return _builder.hasVelocityCovariance()
    }
  }
}
public inline fun io.mavsdk.mocap.MocapProto.Odometry.copy(block: `io.mavsdk.mocap`.OdometryKt.Dsl.() -> kotlin.Unit): io.mavsdk.mocap.MocapProto.Odometry =
  `io.mavsdk.mocap`.OdometryKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val io.mavsdk.mocap.MocapProto.OdometryOrBuilder.positionBodyOrNull: io.mavsdk.mocap.MocapProto.PositionBody?
  get() = if (hasPositionBody()) getPositionBody() else null

public val io.mavsdk.mocap.MocapProto.OdometryOrBuilder.qOrNull: io.mavsdk.mocap.MocapProto.Quaternion?
  get() = if (hasQ()) getQ() else null

public val io.mavsdk.mocap.MocapProto.OdometryOrBuilder.speedBodyOrNull: io.mavsdk.mocap.MocapProto.SpeedBody?
  get() = if (hasSpeedBody()) getSpeedBody() else null

public val io.mavsdk.mocap.MocapProto.OdometryOrBuilder.angularVelocityBodyOrNull: io.mavsdk.mocap.MocapProto.AngularVelocityBody?
  get() = if (hasAngularVelocityBody()) getAngularVelocityBody() else null

public val io.mavsdk.mocap.MocapProto.OdometryOrBuilder.poseCovarianceOrNull: io.mavsdk.mocap.MocapProto.Covariance?
  get() = if (hasPoseCovariance()) getPoseCovariance() else null

public val io.mavsdk.mocap.MocapProto.OdometryOrBuilder.velocityCovarianceOrNull: io.mavsdk.mocap.MocapProto.Covariance?
  get() = if (hasVelocityCovariance()) getVelocityCovariance() else null

