// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/telemetry/telemetry.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.telemetry;

@kotlin.jvm.JvmName("-initializeeulerAngle")
public inline fun eulerAngle(block: io.mavsdk.telemetry.EulerAngleKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry.TelemetryProto.EulerAngle =
  io.mavsdk.telemetry.EulerAngleKt.Dsl._create(io.mavsdk.telemetry.TelemetryProto.EulerAngle.newBuilder()).apply { block() }._build()
/**
 * ```
 *
 * Euler angle type.
 *
 * All rotations and axis systems follow the right-hand rule.
 * The Euler angles follow the convention of a 3-2-1 intrinsic Tait-Bryan rotation sequence.
 *
 * For more info see https://en.wikipedia.org/wiki/Euler_angles
 * ```
 *
 * Protobuf type `mavsdk.rpc.telemetry.EulerAngle`
 */
public object EulerAngleKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.telemetry.TelemetryProto.EulerAngle.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.telemetry.TelemetryProto.EulerAngle.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.telemetry.TelemetryProto.EulerAngle = _builder.build()

    /**
     * <pre>
     * Roll angle in degrees, positive is banking to the right
     * </pre>
     *
     * <code>float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var rollDeg: kotlin.Float
      @JvmName("getRollDeg")
      get() = _builder.getRollDeg()
      @JvmName("setRollDeg")
      set(value) {
        _builder.setRollDeg(value)
      }
    /**
     * ```
     * Roll angle in degrees, positive is banking to the right
     * ```
     *
     * `float roll_deg = 1 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearRollDeg() {
      _builder.clearRollDeg()
    }

    /**
     * <pre>
     * Pitch angle in degrees, positive is pitching nose up
     * </pre>
     *
     * <code>float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var pitchDeg: kotlin.Float
      @JvmName("getPitchDeg")
      get() = _builder.getPitchDeg()
      @JvmName("setPitchDeg")
      set(value) {
        _builder.setPitchDeg(value)
      }
    /**
     * ```
     * Pitch angle in degrees, positive is pitching nose up
     * ```
     *
     * `float pitch_deg = 2 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearPitchDeg() {
      _builder.clearPitchDeg()
    }

    /**
     * <pre>
     * Yaw angle in degrees, positive is clock-wise seen from above
     * </pre>
     *
     * <code>float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var yawDeg: kotlin.Float
      @JvmName("getYawDeg")
      get() = _builder.getYawDeg()
      @JvmName("setYawDeg")
      set(value) {
        _builder.setYawDeg(value)
      }
    /**
     * ```
     * Yaw angle in degrees, positive is clock-wise seen from above
     * ```
     *
     * `float yaw_deg = 3 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearYawDeg() {
      _builder.clearYawDeg()
    }

    /**
     * <pre>
     * Timestamp in microseconds
     * </pre>
     *
     * <code>uint64 timestamp_us = 4;</code>
     */
    public var timestampUs: kotlin.Long
      @JvmName("getTimestampUs")
      get() = _builder.getTimestampUs()
      @JvmName("setTimestampUs")
      set(value) {
        _builder.setTimestampUs(value)
      }
    /**
     * ```
     * Timestamp in microseconds
     * ```
     *
     * `uint64 timestamp_us = 4;`
     */
    public fun clearTimestampUs() {
      _builder.clearTimestampUs()
    }
  }
}
public inline fun io.mavsdk.telemetry.TelemetryProto.EulerAngle.copy(block: `io.mavsdk.telemetry`.EulerAngleKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry.TelemetryProto.EulerAngle =
  `io.mavsdk.telemetry`.EulerAngleKt.Dsl._create(this.toBuilder()).apply { block() }._build()

