// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/calibration/calibration.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.calibration;

@kotlin.jvm.JvmName("-initializeprogressData")
public inline fun progressData(block: io.mavsdk.calibration.ProgressDataKt.Dsl.() -> kotlin.Unit): io.mavsdk.calibration.CalibrationProto.ProgressData =
  io.mavsdk.calibration.ProgressDataKt.Dsl._create(io.mavsdk.calibration.CalibrationProto.ProgressData.newBuilder()).apply { block() }._build()
/**
 * ```
 *
 * Progress data coming from calibration.
 *
 * Can be a progress percentage, or an instruction text.
 * ```
 *
 * Protobuf type `mavsdk.rpc.calibration.ProgressData`
 */
public object ProgressDataKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.calibration.CalibrationProto.ProgressData.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.calibration.CalibrationProto.ProgressData.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.calibration.CalibrationProto.ProgressData = _builder.build()

    /**
     * <pre>
     * Whether this ProgressData contains a 'progress' status or not
     * </pre>
     *
     * <code>bool has_progress = 1 [(.mavsdk.options.default_value) = "false"];</code>
     */
    public var hasProgress: kotlin.Boolean
      @JvmName("getHasProgress")
      get() = _builder.getHasProgress()
      @JvmName("setHasProgress")
      set(value) {
        _builder.setHasProgress(value)
      }
    /**
     * ```
     * Whether this ProgressData contains a 'progress' status or not
     * ```
     *
     * `bool has_progress = 1 [(.mavsdk.options.default_value) = "false"];`
     */
    public fun clearHasProgress() {
      _builder.clearHasProgress()
    }

    /**
     * <pre>
     * Progress (percentage)
     * </pre>
     *
     * <code>float progress = 2 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var progress: kotlin.Float
      @JvmName("getProgress")
      get() = _builder.getProgress()
      @JvmName("setProgress")
      set(value) {
        _builder.setProgress(value)
      }
    /**
     * ```
     * Progress (percentage)
     * ```
     *
     * `float progress = 2 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearProgress() {
      _builder.clearProgress()
    }

    /**
     * <pre>
     * Whether this ProgressData contains a 'status_text' or not
     * </pre>
     *
     * <code>bool has_status_text = 3 [(.mavsdk.options.default_value) = "false"];</code>
     */
    public var hasStatusText: kotlin.Boolean
      @JvmName("getHasStatusText")
      get() = _builder.getHasStatusText()
      @JvmName("setHasStatusText")
      set(value) {
        _builder.setHasStatusText(value)
      }
    /**
     * ```
     * Whether this ProgressData contains a 'status_text' or not
     * ```
     *
     * `bool has_status_text = 3 [(.mavsdk.options.default_value) = "false"];`
     */
    public fun clearHasStatusText() {
      _builder.clearHasStatusText()
    }

    /**
     * ```
     * Instruction text
     * ```
     *
     * `string status_text = 4;`
     */
    public var statusText: kotlin.String
      @JvmName("getStatusText")
      get() = _builder.getStatusText()
      @JvmName("setStatusText")
      set(value) {
        _builder.setStatusText(value)
      }
    /**
     * ```
     * Instruction text
     * ```
     *
     * `string status_text = 4;`
     */
    public fun clearStatusText() {
      _builder.clearStatusText()
    }
  }
}
public inline fun io.mavsdk.calibration.CalibrationProto.ProgressData.copy(block: `io.mavsdk.calibration`.ProgressDataKt.Dsl.() -> kotlin.Unit): io.mavsdk.calibration.CalibrationProto.ProgressData =
  `io.mavsdk.calibration`.ProgressDataKt.Dsl._create(this.toBuilder()).apply { block() }._build()

