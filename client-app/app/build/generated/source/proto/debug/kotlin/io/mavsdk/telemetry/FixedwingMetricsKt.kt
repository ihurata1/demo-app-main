// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/telemetry/telemetry.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.telemetry;

@kotlin.jvm.JvmName("-initializefixedwingMetrics")
public inline fun fixedwingMetrics(block: io.mavsdk.telemetry.FixedwingMetricsKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry.TelemetryProto.FixedwingMetrics =
  io.mavsdk.telemetry.FixedwingMetricsKt.Dsl._create(io.mavsdk.telemetry.TelemetryProto.FixedwingMetrics.newBuilder()).apply { block() }._build()
/**
 * ```
 * FixedwingMetrics message type.
 * ```
 *
 * Protobuf type `mavsdk.rpc.telemetry.FixedwingMetrics`
 */
public object FixedwingMetricsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.telemetry.TelemetryProto.FixedwingMetrics.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.telemetry.TelemetryProto.FixedwingMetrics.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.telemetry.TelemetryProto.FixedwingMetrics = _builder.build()

    /**
     * <pre>
     * Current indicated airspeed (IAS) in metres per second
     * </pre>
     *
     * <code>float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var airspeedMS: kotlin.Float
      @JvmName("getAirspeedMS")
      get() = _builder.getAirspeedMS()
      @JvmName("setAirspeedMS")
      set(value) {
        _builder.setAirspeedMS(value)
      }
    /**
     * ```
     * Current indicated airspeed (IAS) in metres per second
     * ```
     *
     * `float airspeed_m_s = 1 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearAirspeedMS() {
      _builder.clearAirspeedMS()
    }

    /**
     * <pre>
     * Current throttle setting (0 to 100)
     * </pre>
     *
     * <code>float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var throttlePercentage: kotlin.Float
      @JvmName("getThrottlePercentage")
      get() = _builder.getThrottlePercentage()
      @JvmName("setThrottlePercentage")
      set(value) {
        _builder.setThrottlePercentage(value)
      }
    /**
     * ```
     * Current throttle setting (0 to 100)
     * ```
     *
     * `float throttle_percentage = 2 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearThrottlePercentage() {
      _builder.clearThrottlePercentage()
    }

    /**
     * <pre>
     * Current climb rate in metres per second
     * </pre>
     *
     * <code>float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var climbRateMS: kotlin.Float
      @JvmName("getClimbRateMS")
      get() = _builder.getClimbRateMS()
      @JvmName("setClimbRateMS")
      set(value) {
        _builder.setClimbRateMS(value)
      }
    /**
     * ```
     * Current climb rate in metres per second
     * ```
     *
     * `float climb_rate_m_s = 3 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearClimbRateMS() {
      _builder.clearClimbRateMS()
    }
  }
}
public inline fun io.mavsdk.telemetry.TelemetryProto.FixedwingMetrics.copy(block: `io.mavsdk.telemetry`.FixedwingMetricsKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry.TelemetryProto.FixedwingMetrics =
  `io.mavsdk.telemetry`.FixedwingMetricsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

