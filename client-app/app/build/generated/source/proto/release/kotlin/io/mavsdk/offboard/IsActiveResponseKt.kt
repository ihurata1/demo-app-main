// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/offboard/offboard.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.offboard;

@kotlin.jvm.JvmName("-initializeisActiveResponse")
public inline fun isActiveResponse(block: io.mavsdk.offboard.IsActiveResponseKt.Dsl.() -> kotlin.Unit): io.mavsdk.offboard.OffboardProto.IsActiveResponse =
  io.mavsdk.offboard.IsActiveResponseKt.Dsl._create(io.mavsdk.offboard.OffboardProto.IsActiveResponse.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `mavsdk.rpc.offboard.IsActiveResponse`
 */
public object IsActiveResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.offboard.OffboardProto.IsActiveResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.offboard.OffboardProto.IsActiveResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.offboard.OffboardProto.IsActiveResponse = _builder.build()

    /**
     * <pre>
     * True if offboard is active
     * </pre>
     *
     * <code>bool is_active = 1;</code>
     */
    public var isActive: kotlin.Boolean
      @JvmName("getIsActive")
      get() = _builder.getIsActive()
      @JvmName("setIsActive")
      set(value) {
        _builder.setIsActive(value)
      }
    /**
     * ```
     * True if offboard is active
     * ```
     *
     * `bool is_active = 1;`
     */
    public fun clearIsActive() {
      _builder.clearIsActive()
    }
  }
}
public inline fun io.mavsdk.offboard.OffboardProto.IsActiveResponse.copy(block: `io.mavsdk.offboard`.IsActiveResponseKt.Dsl.() -> kotlin.Unit): io.mavsdk.offboard.OffboardProto.IsActiveResponse =
  `io.mavsdk.offboard`.IsActiveResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

