// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/failure/failure.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.failure;

@kotlin.jvm.JvmName("-initializeinjectResponse")
public inline fun injectResponse(block: io.mavsdk.failure.InjectResponseKt.Dsl.() -> kotlin.Unit): io.mavsdk.failure.FailureProto.InjectResponse =
  io.mavsdk.failure.InjectResponseKt.Dsl._create(io.mavsdk.failure.FailureProto.InjectResponse.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `mavsdk.rpc.failure.InjectResponse`
 */
public object InjectResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.failure.FailureProto.InjectResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.failure.FailureProto.InjectResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.failure.FailureProto.InjectResponse = _builder.build()

    /**
     * `.mavsdk.rpc.failure.FailureResult failure_result = 1;`
     */
    public var failureResult: io.mavsdk.failure.FailureProto.FailureResult
      @JvmName("getFailureResult")
      get() = _builder.getFailureResult()
      @JvmName("setFailureResult")
      set(value) {
        _builder.setFailureResult(value)
      }
    /**
     * `.mavsdk.rpc.failure.FailureResult failure_result = 1;`
     */
    public fun clearFailureResult() {
      _builder.clearFailureResult()
    }
    /**
     * `.mavsdk.rpc.failure.FailureResult failure_result = 1;`
     * @return Whether the failureResult field is set.
     */
    public fun hasFailureResult(): kotlin.Boolean {
      return _builder.hasFailureResult()
    }
  }
}
public inline fun io.mavsdk.failure.FailureProto.InjectResponse.copy(block: `io.mavsdk.failure`.InjectResponseKt.Dsl.() -> kotlin.Unit): io.mavsdk.failure.FailureProto.InjectResponse =
  `io.mavsdk.failure`.InjectResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val io.mavsdk.failure.FailureProto.InjectResponseOrBuilder.failureResultOrNull: io.mavsdk.failure.FailureProto.FailureResult?
  get() = if (hasFailureResult()) getFailureResult() else null

