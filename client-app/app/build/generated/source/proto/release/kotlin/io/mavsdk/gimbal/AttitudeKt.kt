// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/gimbal/gimbal.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.gimbal;

@kotlin.jvm.JvmName("-initializeattitude")
public inline fun attitude(block: io.mavsdk.gimbal.AttitudeKt.Dsl.() -> kotlin.Unit): io.mavsdk.gimbal.GimbalProto.Attitude =
  io.mavsdk.gimbal.AttitudeKt.Dsl._create(io.mavsdk.gimbal.GimbalProto.Attitude.newBuilder()).apply { block() }._build()
/**
 * ```
 * Gimbal attitude type
 * ```
 *
 * Protobuf type `mavsdk.rpc.gimbal.Attitude`
 */
public object AttitudeKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.gimbal.GimbalProto.Attitude.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.gimbal.GimbalProto.Attitude.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.gimbal.GimbalProto.Attitude = _builder.build()

    /**
     * ```
     * Euler angle relative to forward
     * ```
     *
     * `.mavsdk.rpc.gimbal.EulerAngle euler_angle_forward = 1;`
     */
    public var eulerAngleForward: io.mavsdk.gimbal.GimbalProto.EulerAngle
      @JvmName("getEulerAngleForward")
      get() = _builder.getEulerAngleForward()
      @JvmName("setEulerAngleForward")
      set(value) {
        _builder.setEulerAngleForward(value)
      }
    /**
     * ```
     * Euler angle relative to forward
     * ```
     *
     * `.mavsdk.rpc.gimbal.EulerAngle euler_angle_forward = 1;`
     */
    public fun clearEulerAngleForward() {
      _builder.clearEulerAngleForward()
    }
    /**
     * ```
     * Euler angle relative to forward
     * ```
     *
     * `.mavsdk.rpc.gimbal.EulerAngle euler_angle_forward = 1;`
     * @return Whether the eulerAngleForward field is set.
     */
    public fun hasEulerAngleForward(): kotlin.Boolean {
      return _builder.hasEulerAngleForward()
    }

    /**
     * ```
     * Quaternion relative to forward
     * ```
     *
     * `.mavsdk.rpc.gimbal.Quaternion quaternion_forward = 2;`
     */
    public var quaternionForward: io.mavsdk.gimbal.GimbalProto.Quaternion
      @JvmName("getQuaternionForward")
      get() = _builder.getQuaternionForward()
      @JvmName("setQuaternionForward")
      set(value) {
        _builder.setQuaternionForward(value)
      }
    /**
     * ```
     * Quaternion relative to forward
     * ```
     *
     * `.mavsdk.rpc.gimbal.Quaternion quaternion_forward = 2;`
     */
    public fun clearQuaternionForward() {
      _builder.clearQuaternionForward()
    }
    /**
     * ```
     * Quaternion relative to forward
     * ```
     *
     * `.mavsdk.rpc.gimbal.Quaternion quaternion_forward = 2;`
     * @return Whether the quaternionForward field is set.
     */
    public fun hasQuaternionForward(): kotlin.Boolean {
      return _builder.hasQuaternionForward()
    }

    /**
     * ```
     * Euler angle relative to North
     * ```
     *
     * `.mavsdk.rpc.gimbal.EulerAngle euler_angle_north = 3;`
     */
    public var eulerAngleNorth: io.mavsdk.gimbal.GimbalProto.EulerAngle
      @JvmName("getEulerAngleNorth")
      get() = _builder.getEulerAngleNorth()
      @JvmName("setEulerAngleNorth")
      set(value) {
        _builder.setEulerAngleNorth(value)
      }
    /**
     * ```
     * Euler angle relative to North
     * ```
     *
     * `.mavsdk.rpc.gimbal.EulerAngle euler_angle_north = 3;`
     */
    public fun clearEulerAngleNorth() {
      _builder.clearEulerAngleNorth()
    }
    /**
     * ```
     * Euler angle relative to North
     * ```
     *
     * `.mavsdk.rpc.gimbal.EulerAngle euler_angle_north = 3;`
     * @return Whether the eulerAngleNorth field is set.
     */
    public fun hasEulerAngleNorth(): kotlin.Boolean {
      return _builder.hasEulerAngleNorth()
    }

    /**
     * ```
     * Quaternion relative to North
     * ```
     *
     * `.mavsdk.rpc.gimbal.Quaternion quaternion_north = 4;`
     */
    public var quaternionNorth: io.mavsdk.gimbal.GimbalProto.Quaternion
      @JvmName("getQuaternionNorth")
      get() = _builder.getQuaternionNorth()
      @JvmName("setQuaternionNorth")
      set(value) {
        _builder.setQuaternionNorth(value)
      }
    /**
     * ```
     * Quaternion relative to North
     * ```
     *
     * `.mavsdk.rpc.gimbal.Quaternion quaternion_north = 4;`
     */
    public fun clearQuaternionNorth() {
      _builder.clearQuaternionNorth()
    }
    /**
     * ```
     * Quaternion relative to North
     * ```
     *
     * `.mavsdk.rpc.gimbal.Quaternion quaternion_north = 4;`
     * @return Whether the quaternionNorth field is set.
     */
    public fun hasQuaternionNorth(): kotlin.Boolean {
      return _builder.hasQuaternionNorth()
    }

    /**
     * ```
     * The angular rate
     * ```
     *
     * `.mavsdk.rpc.gimbal.AngularVelocityBody angular_velocity = 5;`
     */
    public var angularVelocity: io.mavsdk.gimbal.GimbalProto.AngularVelocityBody
      @JvmName("getAngularVelocity")
      get() = _builder.getAngularVelocity()
      @JvmName("setAngularVelocity")
      set(value) {
        _builder.setAngularVelocity(value)
      }
    /**
     * ```
     * The angular rate
     * ```
     *
     * `.mavsdk.rpc.gimbal.AngularVelocityBody angular_velocity = 5;`
     */
    public fun clearAngularVelocity() {
      _builder.clearAngularVelocity()
    }
    /**
     * ```
     * The angular rate
     * ```
     *
     * `.mavsdk.rpc.gimbal.AngularVelocityBody angular_velocity = 5;`
     * @return Whether the angularVelocity field is set.
     */
    public fun hasAngularVelocity(): kotlin.Boolean {
      return _builder.hasAngularVelocity()
    }

    /**
     * <pre>
     * Timestamp in microseconds
     * </pre>
     *
     * <code>uint64 timestamp_us = 6;</code>
     */
    public var timestampUs: kotlin.Long
      @JvmName("getTimestampUs")
      get() = _builder.getTimestampUs()
      @JvmName("setTimestampUs")
      set(value) {
        _builder.setTimestampUs(value)
      }
    /**
     * ```
     * Timestamp in microseconds
     * ```
     *
     * `uint64 timestamp_us = 6;`
     */
    public fun clearTimestampUs() {
      _builder.clearTimestampUs()
    }
  }
}
public inline fun io.mavsdk.gimbal.GimbalProto.Attitude.copy(block: `io.mavsdk.gimbal`.AttitudeKt.Dsl.() -> kotlin.Unit): io.mavsdk.gimbal.GimbalProto.Attitude =
  `io.mavsdk.gimbal`.AttitudeKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val io.mavsdk.gimbal.GimbalProto.AttitudeOrBuilder.eulerAngleForwardOrNull: io.mavsdk.gimbal.GimbalProto.EulerAngle?
  get() = if (hasEulerAngleForward()) getEulerAngleForward() else null

public val io.mavsdk.gimbal.GimbalProto.AttitudeOrBuilder.quaternionForwardOrNull: io.mavsdk.gimbal.GimbalProto.Quaternion?
  get() = if (hasQuaternionForward()) getQuaternionForward() else null

public val io.mavsdk.gimbal.GimbalProto.AttitudeOrBuilder.eulerAngleNorthOrNull: io.mavsdk.gimbal.GimbalProto.EulerAngle?
  get() = if (hasEulerAngleNorth()) getEulerAngleNorth() else null

public val io.mavsdk.gimbal.GimbalProto.AttitudeOrBuilder.quaternionNorthOrNull: io.mavsdk.gimbal.GimbalProto.Quaternion?
  get() = if (hasQuaternionNorth()) getQuaternionNorth() else null

public val io.mavsdk.gimbal.GimbalProto.AttitudeOrBuilder.angularVelocityOrNull: io.mavsdk.gimbal.GimbalProto.AngularVelocityBody?
  get() = if (hasAngularVelocity()) getAngularVelocity() else null

