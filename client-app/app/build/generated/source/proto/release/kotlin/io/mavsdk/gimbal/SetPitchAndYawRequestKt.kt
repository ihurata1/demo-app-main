// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/gimbal/gimbal.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.gimbal;

@kotlin.jvm.JvmName("-initializesetPitchAndYawRequest")
public inline fun setPitchAndYawRequest(block: io.mavsdk.gimbal.SetPitchAndYawRequestKt.Dsl.() -> kotlin.Unit): io.mavsdk.gimbal.GimbalProto.SetPitchAndYawRequest =
  io.mavsdk.gimbal.SetPitchAndYawRequestKt.Dsl._create(io.mavsdk.gimbal.GimbalProto.SetPitchAndYawRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `mavsdk.rpc.gimbal.SetPitchAndYawRequest`
 */
public object SetPitchAndYawRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.gimbal.GimbalProto.SetPitchAndYawRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.gimbal.GimbalProto.SetPitchAndYawRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.gimbal.GimbalProto.SetPitchAndYawRequest = _builder.build()

    /**
     * <pre>
     * Pitch angle in degrees (negative points down)
     * </pre>
     *
     * <code>float pitch_deg = 1;</code>
     */
    public var pitchDeg: kotlin.Float
      @JvmName("getPitchDeg")
      get() = _builder.getPitchDeg()
      @JvmName("setPitchDeg")
      set(value) {
        _builder.setPitchDeg(value)
      }
    /**
     * ```
     * Pitch angle in degrees (negative points down)
     * ```
     *
     * `float pitch_deg = 1;`
     */
    public fun clearPitchDeg() {
      _builder.clearPitchDeg()
    }

    /**
     * <pre>
     * Yaw angle in degrees (positive is clock-wise, range: -180 to 180 or 0 to 360)
     * </pre>
     *
     * <code>float yaw_deg = 2;</code>
     */
    public var yawDeg: kotlin.Float
      @JvmName("getYawDeg")
      get() = _builder.getYawDeg()
      @JvmName("setYawDeg")
      set(value) {
        _builder.setYawDeg(value)
      }
    /**
     * ```
     * Yaw angle in degrees (positive is clock-wise, range: -180 to 180 or 0 to 360)
     * ```
     *
     * `float yaw_deg = 2;`
     */
    public fun clearYawDeg() {
      _builder.clearYawDeg()
    }
  }
}
public inline fun io.mavsdk.gimbal.GimbalProto.SetPitchAndYawRequest.copy(block: `io.mavsdk.gimbal`.SetPitchAndYawRequestKt.Dsl.() -> kotlin.Unit): io.mavsdk.gimbal.GimbalProto.SetPitchAndYawRequest =
  `io.mavsdk.gimbal`.SetPitchAndYawRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

