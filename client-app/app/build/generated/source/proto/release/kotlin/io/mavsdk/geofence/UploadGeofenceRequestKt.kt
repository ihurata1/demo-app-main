// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/geofence/geofence.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.geofence;

@kotlin.jvm.JvmName("-initializeuploadGeofenceRequest")
public inline fun uploadGeofenceRequest(block: io.mavsdk.geofence.UploadGeofenceRequestKt.Dsl.() -> kotlin.Unit): io.mavsdk.geofence.GeofenceProto.UploadGeofenceRequest =
  io.mavsdk.geofence.UploadGeofenceRequestKt.Dsl._create(io.mavsdk.geofence.GeofenceProto.UploadGeofenceRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `mavsdk.rpc.geofence.UploadGeofenceRequest`
 */
public object UploadGeofenceRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.geofence.GeofenceProto.UploadGeofenceRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.geofence.GeofenceProto.UploadGeofenceRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.geofence.GeofenceProto.UploadGeofenceRequest = _builder.build()

    /**
     * ```
     * Circle(s) and/or Polygon(s) representing the geofence(s)
     * ```
     *
     * `.mavsdk.rpc.geofence.GeofenceData geofence_data = 1;`
     */
    public var geofenceData: io.mavsdk.geofence.GeofenceProto.GeofenceData
      @JvmName("getGeofenceData")
      get() = _builder.getGeofenceData()
      @JvmName("setGeofenceData")
      set(value) {
        _builder.setGeofenceData(value)
      }
    /**
     * ```
     * Circle(s) and/or Polygon(s) representing the geofence(s)
     * ```
     *
     * `.mavsdk.rpc.geofence.GeofenceData geofence_data = 1;`
     */
    public fun clearGeofenceData() {
      _builder.clearGeofenceData()
    }
    /**
     * ```
     * Circle(s) and/or Polygon(s) representing the geofence(s)
     * ```
     *
     * `.mavsdk.rpc.geofence.GeofenceData geofence_data = 1;`
     * @return Whether the geofenceData field is set.
     */
    public fun hasGeofenceData(): kotlin.Boolean {
      return _builder.hasGeofenceData()
    }
  }
}
public inline fun io.mavsdk.geofence.GeofenceProto.UploadGeofenceRequest.copy(block: `io.mavsdk.geofence`.UploadGeofenceRequestKt.Dsl.() -> kotlin.Unit): io.mavsdk.geofence.GeofenceProto.UploadGeofenceRequest =
  `io.mavsdk.geofence`.UploadGeofenceRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val io.mavsdk.geofence.GeofenceProto.UploadGeofenceRequestOrBuilder.geofenceDataOrNull: io.mavsdk.geofence.GeofenceProto.GeofenceData?
  get() = if (hasGeofenceData()) getGeofenceData() else null

