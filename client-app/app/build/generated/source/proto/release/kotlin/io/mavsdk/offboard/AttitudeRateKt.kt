// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/offboard/offboard.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.offboard;

@kotlin.jvm.JvmName("-initializeattitudeRate")
public inline fun attitudeRate(block: io.mavsdk.offboard.AttitudeRateKt.Dsl.() -> kotlin.Unit): io.mavsdk.offboard.OffboardProto.AttitudeRate =
  io.mavsdk.offboard.AttitudeRateKt.Dsl._create(io.mavsdk.offboard.OffboardProto.AttitudeRate.newBuilder()).apply { block() }._build()
/**
 * ```
 * Type for attitude rate commands in body coordinates (roll, pitch, yaw angular rate and thrust)
 * ```
 *
 * Protobuf type `mavsdk.rpc.offboard.AttitudeRate`
 */
public object AttitudeRateKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.offboard.OffboardProto.AttitudeRate.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.offboard.OffboardProto.AttitudeRate.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.offboard.OffboardProto.AttitudeRate = _builder.build()

    /**
     * <pre>
     * Roll angular rate (in degrees/second, positive for clock-wise looking from front)
     * </pre>
     *
     * <code>float roll_deg_s = 1;</code>
     */
    public var rollDegS: kotlin.Float
      @JvmName("getRollDegS")
      get() = _builder.getRollDegS()
      @JvmName("setRollDegS")
      set(value) {
        _builder.setRollDegS(value)
      }
    /**
     * ```
     * Roll angular rate (in degrees/second, positive for clock-wise looking from front)
     * ```
     *
     * `float roll_deg_s = 1;`
     */
    public fun clearRollDegS() {
      _builder.clearRollDegS()
    }

    /**
     * <pre>
     * Pitch angular rate (in degrees/second, positive for head/front moving up)
     * </pre>
     *
     * <code>float pitch_deg_s = 2;</code>
     */
    public var pitchDegS: kotlin.Float
      @JvmName("getPitchDegS")
      get() = _builder.getPitchDegS()
      @JvmName("setPitchDegS")
      set(value) {
        _builder.setPitchDegS(value)
      }
    /**
     * ```
     * Pitch angular rate (in degrees/second, positive for head/front moving up)
     * ```
     *
     * `float pitch_deg_s = 2;`
     */
    public fun clearPitchDegS() {
      _builder.clearPitchDegS()
    }

    /**
     * <pre>
     * Yaw angular rate (in degrees/second, positive for clock-wise looking from above)
     * </pre>
     *
     * <code>float yaw_deg_s = 3;</code>
     */
    public var yawDegS: kotlin.Float
      @JvmName("getYawDegS")
      get() = _builder.getYawDegS()
      @JvmName("setYawDegS")
      set(value) {
        _builder.setYawDegS(value)
      }
    /**
     * ```
     * Yaw angular rate (in degrees/second, positive for clock-wise looking from above)
     * ```
     *
     * `float yaw_deg_s = 3;`
     */
    public fun clearYawDegS() {
      _builder.clearYawDegS()
    }

    /**
     * <pre>
     * Thrust (range: 0 to 1)
     * </pre>
     *
     * <code>float thrust_value = 4;</code>
     */
    public var thrustValue: kotlin.Float
      @JvmName("getThrustValue")
      get() = _builder.getThrustValue()
      @JvmName("setThrustValue")
      set(value) {
        _builder.setThrustValue(value)
      }
    /**
     * ```
     * Thrust (range: 0 to 1)
     * ```
     *
     * `float thrust_value = 4;`
     */
    public fun clearThrustValue() {
      _builder.clearThrustValue()
    }
  }
}
public inline fun io.mavsdk.offboard.OffboardProto.AttitudeRate.copy(block: `io.mavsdk.offboard`.AttitudeRateKt.Dsl.() -> kotlin.Unit): io.mavsdk.offboard.OffboardProto.AttitudeRate =
  `io.mavsdk.offboard`.AttitudeRateKt.Dsl._create(this.toBuilder()).apply { block() }._build()

