// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/core/core.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.core;

@kotlin.jvm.JvmName("-initializesetMavlinkTimeoutRequest")
public inline fun setMavlinkTimeoutRequest(block: io.mavsdk.core.SetMavlinkTimeoutRequestKt.Dsl.() -> kotlin.Unit): io.mavsdk.core.CoreProto.SetMavlinkTimeoutRequest =
  io.mavsdk.core.SetMavlinkTimeoutRequestKt.Dsl._create(io.mavsdk.core.CoreProto.SetMavlinkTimeoutRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `mavsdk.rpc.core.SetMavlinkTimeoutRequest`
 */
public object SetMavlinkTimeoutRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.core.CoreProto.SetMavlinkTimeoutRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.core.CoreProto.SetMavlinkTimeoutRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.core.CoreProto.SetMavlinkTimeoutRequest = _builder.build()

    /**
     * <pre>
     * Timeout in seconds
     * </pre>
     *
     * <code>double timeout_s = 1;</code>
     */
    public var timeoutS: kotlin.Double
      @JvmName("getTimeoutS")
      get() = _builder.getTimeoutS()
      @JvmName("setTimeoutS")
      set(value) {
        _builder.setTimeoutS(value)
      }
    /**
     * ```
     * Timeout in seconds
     * ```
     *
     * `double timeout_s = 1;`
     */
    public fun clearTimeoutS() {
      _builder.clearTimeoutS()
    }
  }
}
public inline fun io.mavsdk.core.CoreProto.SetMavlinkTimeoutRequest.copy(block: `io.mavsdk.core`.SetMavlinkTimeoutRequestKt.Dsl.() -> kotlin.Unit): io.mavsdk.core.CoreProto.SetMavlinkTimeoutRequest =
  `io.mavsdk.core`.SetMavlinkTimeoutRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

