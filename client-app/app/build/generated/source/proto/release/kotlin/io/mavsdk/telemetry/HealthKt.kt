// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/telemetry/telemetry.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.telemetry;

@kotlin.jvm.JvmName("-initializehealth")
public inline fun health(block: io.mavsdk.telemetry.HealthKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry.TelemetryProto.Health =
  io.mavsdk.telemetry.HealthKt.Dsl._create(io.mavsdk.telemetry.TelemetryProto.Health.newBuilder()).apply { block() }._build()
/**
 * ```
 * Health type.
 * ```
 *
 * Protobuf type `mavsdk.rpc.telemetry.Health`
 */
public object HealthKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.telemetry.TelemetryProto.Health.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.telemetry.TelemetryProto.Health.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.telemetry.TelemetryProto.Health = _builder.build()

    /**
     * <pre>
     * True if the gyrometer is calibrated
     * </pre>
     *
     * <code>bool is_gyrometer_calibration_ok = 1 [(.mavsdk.options.default_value) = "false"];</code>
     */
    public var isGyrometerCalibrationOk: kotlin.Boolean
      @JvmName("getIsGyrometerCalibrationOk")
      get() = _builder.getIsGyrometerCalibrationOk()
      @JvmName("setIsGyrometerCalibrationOk")
      set(value) {
        _builder.setIsGyrometerCalibrationOk(value)
      }
    /**
     * ```
     * True if the gyrometer is calibrated
     * ```
     *
     * `bool is_gyrometer_calibration_ok = 1 [(.mavsdk.options.default_value) = "false"];`
     */
    public fun clearIsGyrometerCalibrationOk() {
      _builder.clearIsGyrometerCalibrationOk()
    }

    /**
     * <pre>
     * True if the accelerometer is calibrated
     * </pre>
     *
     * <code>bool is_accelerometer_calibration_ok = 2 [(.mavsdk.options.default_value) = "false"];</code>
     */
    public var isAccelerometerCalibrationOk: kotlin.Boolean
      @JvmName("getIsAccelerometerCalibrationOk")
      get() = _builder.getIsAccelerometerCalibrationOk()
      @JvmName("setIsAccelerometerCalibrationOk")
      set(value) {
        _builder.setIsAccelerometerCalibrationOk(value)
      }
    /**
     * ```
     * True if the accelerometer is calibrated
     * ```
     *
     * `bool is_accelerometer_calibration_ok = 2 [(.mavsdk.options.default_value) = "false"];`
     */
    public fun clearIsAccelerometerCalibrationOk() {
      _builder.clearIsAccelerometerCalibrationOk()
    }

    /**
     * <pre>
     * True if the magnetometer is calibrated
     * </pre>
     *
     * <code>bool is_magnetometer_calibration_ok = 3 [(.mavsdk.options.default_value) = "false"];</code>
     */
    public var isMagnetometerCalibrationOk: kotlin.Boolean
      @JvmName("getIsMagnetometerCalibrationOk")
      get() = _builder.getIsMagnetometerCalibrationOk()
      @JvmName("setIsMagnetometerCalibrationOk")
      set(value) {
        _builder.setIsMagnetometerCalibrationOk(value)
      }
    /**
     * ```
     * True if the magnetometer is calibrated
     * ```
     *
     * `bool is_magnetometer_calibration_ok = 3 [(.mavsdk.options.default_value) = "false"];`
     */
    public fun clearIsMagnetometerCalibrationOk() {
      _builder.clearIsMagnetometerCalibrationOk()
    }

    /**
     * <pre>
     * True if the local position estimate is good enough to fly in 'position control' mode
     * </pre>
     *
     * <code>bool is_local_position_ok = 5 [(.mavsdk.options.default_value) = "false"];</code>
     */
    public var isLocalPositionOk: kotlin.Boolean
      @JvmName("getIsLocalPositionOk")
      get() = _builder.getIsLocalPositionOk()
      @JvmName("setIsLocalPositionOk")
      set(value) {
        _builder.setIsLocalPositionOk(value)
      }
    /**
     * ```
     * True if the local position estimate is good enough to fly in 'position control' mode
     * ```
     *
     * `bool is_local_position_ok = 5 [(.mavsdk.options.default_value) = "false"];`
     */
    public fun clearIsLocalPositionOk() {
      _builder.clearIsLocalPositionOk()
    }

    /**
     * <pre>
     * True if the global position estimate is good enough to fly in 'position control' mode
     * </pre>
     *
     * <code>bool is_global_position_ok = 6 [(.mavsdk.options.default_value) = "false"];</code>
     */
    public var isGlobalPositionOk: kotlin.Boolean
      @JvmName("getIsGlobalPositionOk")
      get() = _builder.getIsGlobalPositionOk()
      @JvmName("setIsGlobalPositionOk")
      set(value) {
        _builder.setIsGlobalPositionOk(value)
      }
    /**
     * ```
     * True if the global position estimate is good enough to fly in 'position control' mode
     * ```
     *
     * `bool is_global_position_ok = 6 [(.mavsdk.options.default_value) = "false"];`
     */
    public fun clearIsGlobalPositionOk() {
      _builder.clearIsGlobalPositionOk()
    }

    /**
     * <pre>
     * True if the home position has been initialized properly
     * </pre>
     *
     * <code>bool is_home_position_ok = 7 [(.mavsdk.options.default_value) = "false"];</code>
     */
    public var isHomePositionOk: kotlin.Boolean
      @JvmName("getIsHomePositionOk")
      get() = _builder.getIsHomePositionOk()
      @JvmName("setIsHomePositionOk")
      set(value) {
        _builder.setIsHomePositionOk(value)
      }
    /**
     * ```
     * True if the home position has been initialized properly
     * ```
     *
     * `bool is_home_position_ok = 7 [(.mavsdk.options.default_value) = "false"];`
     */
    public fun clearIsHomePositionOk() {
      _builder.clearIsHomePositionOk()
    }

    /**
     * <pre>
     * True if system can be armed
     * </pre>
     *
     * <code>bool is_armable = 8 [(.mavsdk.options.default_value) = "false"];</code>
     */
    public var isArmable: kotlin.Boolean
      @JvmName("getIsArmable")
      get() = _builder.getIsArmable()
      @JvmName("setIsArmable")
      set(value) {
        _builder.setIsArmable(value)
      }
    /**
     * ```
     * True if system can be armed
     * ```
     *
     * `bool is_armable = 8 [(.mavsdk.options.default_value) = "false"];`
     */
    public fun clearIsArmable() {
      _builder.clearIsArmable()
    }
  }
}
public inline fun io.mavsdk.telemetry.TelemetryProto.Health.copy(block: `io.mavsdk.telemetry`.HealthKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry.TelemetryProto.Health =
  `io.mavsdk.telemetry`.HealthKt.Dsl._create(this.toBuilder()).apply { block() }._build()

