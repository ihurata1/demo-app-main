// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/arm_authorizer_server/arm_authorizer_server.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.arm_authorizer;

@kotlin.jvm.JvmName("-initializerejectArmAuthorizationRequest")
public inline fun rejectArmAuthorizationRequest(block: io.mavsdk.arm_authorizer.RejectArmAuthorizationRequestKt.Dsl.() -> kotlin.Unit): io.mavsdk.arm_authorizer.ArmAuthorizerServerProto.RejectArmAuthorizationRequest =
  io.mavsdk.arm_authorizer.RejectArmAuthorizationRequestKt.Dsl._create(io.mavsdk.arm_authorizer.ArmAuthorizerServerProto.RejectArmAuthorizationRequest.newBuilder()).apply { block() }._build()
/**
 * ```
 * Messages for RespondArmAuthorization
 * ```
 *
 * Protobuf type `mavsdk.rpc.arm_authorizer_server.RejectArmAuthorizationRequest`
 */
public object RejectArmAuthorizationRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.arm_authorizer.ArmAuthorizerServerProto.RejectArmAuthorizationRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.arm_authorizer.ArmAuthorizerServerProto.RejectArmAuthorizationRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.arm_authorizer.ArmAuthorizerServerProto.RejectArmAuthorizationRequest = _builder.build()

    /**
     * <pre>
     * True if the answer should be TEMPORARILY_REJECTED, false for DENIED
     * </pre>
     *
     * <code>bool temporarily = 1;</code>
     */
    public var temporarily: kotlin.Boolean
      @JvmName("getTemporarily")
      get() = _builder.getTemporarily()
      @JvmName("setTemporarily")
      set(value) {
        _builder.setTemporarily(value)
      }
    /**
     * ```
     * True if the answer should be TEMPORARILY_REJECTED, false for DENIED
     * ```
     *
     * `bool temporarily = 1;`
     */
    public fun clearTemporarily() {
      _builder.clearTemporarily()
    }

    /**
     * ```
     * Reason for the arm to be rejected
     * ```
     *
     * `.mavsdk.rpc.arm_authorizer_server.RejectionReason reason = 2;`
     */
    public var reason: io.mavsdk.arm_authorizer.ArmAuthorizerServerProto.RejectionReason
      @JvmName("getReason")
      get() = _builder.getReason()
      @JvmName("setReason")
      set(value) {
        _builder.setReason(value)
      }
    public var reasonValue: kotlin.Int
      @JvmName("getReasonValue")
      get() = _builder.getReasonValue()
      @JvmName("setReasonValue")
      set(value) {
        _builder.setReasonValue(value)
      }
    /**
     * ```
     * Reason for the arm to be rejected
     * ```
     *
     * `.mavsdk.rpc.arm_authorizer_server.RejectionReason reason = 2;`
     */
    public fun clearReason() {
      _builder.clearReason()
    }

    /**
     * <pre>
     * Extra information specific to the rejection reason (see https://mavlink.io/en/services/arm_authorization.html)
     * </pre>
     *
     * <code>int32 extra_info = 3;</code>
     */
    public var extraInfo: kotlin.Int
      @JvmName("getExtraInfo")
      get() = _builder.getExtraInfo()
      @JvmName("setExtraInfo")
      set(value) {
        _builder.setExtraInfo(value)
      }
    /**
     * ```
     * Extra information specific to the rejection reason (see https://mavlink.io/en/services/arm_authorization.html)
     * ```
     *
     * `int32 extra_info = 3;`
     */
    public fun clearExtraInfo() {
      _builder.clearExtraInfo()
    }
  }
}
public inline fun io.mavsdk.arm_authorizer.ArmAuthorizerServerProto.RejectArmAuthorizationRequest.copy(block: `io.mavsdk.arm_authorizer`.RejectArmAuthorizationRequestKt.Dsl.() -> kotlin.Unit): io.mavsdk.arm_authorizer.ArmAuthorizerServerProto.RejectArmAuthorizationRequest =
  `io.mavsdk.arm_authorizer`.RejectArmAuthorizationRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

