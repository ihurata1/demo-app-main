// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/offboard/offboard.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.offboard;

@kotlin.jvm.JvmName("-initializepositionNedYaw")
public inline fun positionNedYaw(block: io.mavsdk.offboard.PositionNedYawKt.Dsl.() -> kotlin.Unit): io.mavsdk.offboard.OffboardProto.PositionNedYaw =
  io.mavsdk.offboard.PositionNedYawKt.Dsl._create(io.mavsdk.offboard.OffboardProto.PositionNedYaw.newBuilder()).apply { block() }._build()
/**
 * ```
 * Type for position commands in NED (North East Down) coordinates and yaw.
 * ```
 *
 * Protobuf type `mavsdk.rpc.offboard.PositionNedYaw`
 */
public object PositionNedYawKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.offboard.OffboardProto.PositionNedYaw.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.offboard.OffboardProto.PositionNedYaw.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.offboard.OffboardProto.PositionNedYaw = _builder.build()

    /**
     * <pre>
     * Position North (in metres)
     * </pre>
     *
     * <code>float north_m = 1;</code>
     */
    public var northM: kotlin.Float
      @JvmName("getNorthM")
      get() = _builder.getNorthM()
      @JvmName("setNorthM")
      set(value) {
        _builder.setNorthM(value)
      }
    /**
     * ```
     * Position North (in metres)
     * ```
     *
     * `float north_m = 1;`
     */
    public fun clearNorthM() {
      _builder.clearNorthM()
    }

    /**
     * <pre>
     * Position East (in metres)
     * </pre>
     *
     * <code>float east_m = 2;</code>
     */
    public var eastM: kotlin.Float
      @JvmName("getEastM")
      get() = _builder.getEastM()
      @JvmName("setEastM")
      set(value) {
        _builder.setEastM(value)
      }
    /**
     * ```
     * Position East (in metres)
     * ```
     *
     * `float east_m = 2;`
     */
    public fun clearEastM() {
      _builder.clearEastM()
    }

    /**
     * <pre>
     * Position Down (in metres)
     * </pre>
     *
     * <code>float down_m = 3;</code>
     */
    public var downM: kotlin.Float
      @JvmName("getDownM")
      get() = _builder.getDownM()
      @JvmName("setDownM")
      set(value) {
        _builder.setDownM(value)
      }
    /**
     * ```
     * Position Down (in metres)
     * ```
     *
     * `float down_m = 3;`
     */
    public fun clearDownM() {
      _builder.clearDownM()
    }

    /**
     * <pre>
     * Yaw in degrees (0 North, positive is clock-wise looking from above)
     * </pre>
     *
     * <code>float yaw_deg = 4;</code>
     */
    public var yawDeg: kotlin.Float
      @JvmName("getYawDeg")
      get() = _builder.getYawDeg()
      @JvmName("setYawDeg")
      set(value) {
        _builder.setYawDeg(value)
      }
    /**
     * ```
     * Yaw in degrees (0 North, positive is clock-wise looking from above)
     * ```
     *
     * `float yaw_deg = 4;`
     */
    public fun clearYawDeg() {
      _builder.clearYawDeg()
    }
  }
}
public inline fun io.mavsdk.offboard.OffboardProto.PositionNedYaw.copy(block: `io.mavsdk.offboard`.PositionNedYawKt.Dsl.() -> kotlin.Unit): io.mavsdk.offboard.OffboardProto.PositionNedYaw =
  `io.mavsdk.offboard`.PositionNedYawKt.Dsl._create(this.toBuilder()).apply { block() }._build()

