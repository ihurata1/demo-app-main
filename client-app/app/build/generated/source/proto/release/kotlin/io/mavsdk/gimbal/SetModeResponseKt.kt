// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/gimbal/gimbal.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.gimbal;

@kotlin.jvm.JvmName("-initializesetModeResponse")
public inline fun setModeResponse(block: io.mavsdk.gimbal.SetModeResponseKt.Dsl.() -> kotlin.Unit): io.mavsdk.gimbal.GimbalProto.SetModeResponse =
  io.mavsdk.gimbal.SetModeResponseKt.Dsl._create(io.mavsdk.gimbal.GimbalProto.SetModeResponse.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `mavsdk.rpc.gimbal.SetModeResponse`
 */
public object SetModeResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.gimbal.GimbalProto.SetModeResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.gimbal.GimbalProto.SetModeResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.gimbal.GimbalProto.SetModeResponse = _builder.build()

    /**
     * `.mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;`
     */
    public var gimbalResult: io.mavsdk.gimbal.GimbalProto.GimbalResult
      @JvmName("getGimbalResult")
      get() = _builder.getGimbalResult()
      @JvmName("setGimbalResult")
      set(value) {
        _builder.setGimbalResult(value)
      }
    /**
     * `.mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;`
     */
    public fun clearGimbalResult() {
      _builder.clearGimbalResult()
    }
    /**
     * `.mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;`
     * @return Whether the gimbalResult field is set.
     */
    public fun hasGimbalResult(): kotlin.Boolean {
      return _builder.hasGimbalResult()
    }
  }
}
public inline fun io.mavsdk.gimbal.GimbalProto.SetModeResponse.copy(block: `io.mavsdk.gimbal`.SetModeResponseKt.Dsl.() -> kotlin.Unit): io.mavsdk.gimbal.GimbalProto.SetModeResponse =
  `io.mavsdk.gimbal`.SetModeResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val io.mavsdk.gimbal.GimbalProto.SetModeResponseOrBuilder.gimbalResultOrNull: io.mavsdk.gimbal.GimbalProto.GimbalResult?
  get() = if (hasGimbalResult()) getGimbalResult() else null

