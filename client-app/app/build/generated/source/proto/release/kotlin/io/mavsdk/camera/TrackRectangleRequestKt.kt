// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/camera/camera.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.camera;

@kotlin.jvm.JvmName("-initializetrackRectangleRequest")
public inline fun trackRectangleRequest(block: io.mavsdk.camera.TrackRectangleRequestKt.Dsl.() -> kotlin.Unit): io.mavsdk.camera.CameraProto.TrackRectangleRequest =
  io.mavsdk.camera.TrackRectangleRequestKt.Dsl._create(io.mavsdk.camera.CameraProto.TrackRectangleRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `mavsdk.rpc.camera.TrackRectangleRequest`
 */
public object TrackRectangleRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.camera.CameraProto.TrackRectangleRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.camera.CameraProto.TrackRectangleRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.camera.CameraProto.TrackRectangleRequest = _builder.build()

    /**
     * <pre>
     * Top left corner of rectangle x value (normalized 0..1, 0 is left, 1 is right)
     * </pre>
     *
     * <code>float top_left_x = 1;</code>
     */
    public var topLeftX: kotlin.Float
      @JvmName("getTopLeftX")
      get() = _builder.getTopLeftX()
      @JvmName("setTopLeftX")
      set(value) {
        _builder.setTopLeftX(value)
      }
    /**
     * ```
     * Top left corner of rectangle x value (normalized 0..1, 0 is left, 1 is right)
     * ```
     *
     * `float top_left_x = 1;`
     */
    public fun clearTopLeftX() {
      _builder.clearTopLeftX()
    }

    /**
     * <pre>
     * Top left corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom)
     * </pre>
     *
     * <code>float top_left_y = 2;</code>
     */
    public var topLeftY: kotlin.Float
      @JvmName("getTopLeftY")
      get() = _builder.getTopLeftY()
      @JvmName("setTopLeftY")
      set(value) {
        _builder.setTopLeftY(value)
      }
    /**
     * ```
     * Top left corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom)
     * ```
     *
     * `float top_left_y = 2;`
     */
    public fun clearTopLeftY() {
      _builder.clearTopLeftY()
    }

    /**
     * <pre>
     * Bottom right corner of rectangle x value (normalized 0..1, 0 is left, 1 is right)
     * </pre>
     *
     * <code>float bottom_right_x = 3;</code>
     */
    public var bottomRightX: kotlin.Float
      @JvmName("getBottomRightX")
      get() = _builder.getBottomRightX()
      @JvmName("setBottomRightX")
      set(value) {
        _builder.setBottomRightX(value)
      }
    /**
     * ```
     * Bottom right corner of rectangle x value (normalized 0..1, 0 is left, 1 is right)
     * ```
     *
     * `float bottom_right_x = 3;`
     */
    public fun clearBottomRightX() {
      _builder.clearBottomRightX()
    }

    /**
     * <pre>
     * Bottom right corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom)
     * </pre>
     *
     * <code>float bottom_right_y = 4;</code>
     */
    public var bottomRightY: kotlin.Float
      @JvmName("getBottomRightY")
      get() = _builder.getBottomRightY()
      @JvmName("setBottomRightY")
      set(value) {
        _builder.setBottomRightY(value)
      }
    /**
     * ```
     * Bottom right corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom)
     * ```
     *
     * `float bottom_right_y = 4;`
     */
    public fun clearBottomRightY() {
      _builder.clearBottomRightY()
    }
  }
}
public inline fun io.mavsdk.camera.CameraProto.TrackRectangleRequest.copy(block: `io.mavsdk.camera`.TrackRectangleRequestKt.Dsl.() -> kotlin.Unit): io.mavsdk.camera.CameraProto.TrackRectangleRequest =
  `io.mavsdk.camera`.TrackRectangleRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

