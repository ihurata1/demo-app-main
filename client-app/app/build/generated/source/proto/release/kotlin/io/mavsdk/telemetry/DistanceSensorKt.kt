// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/telemetry/telemetry.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.telemetry;

@kotlin.jvm.JvmName("-initializedistanceSensor")
public inline fun distanceSensor(block: io.mavsdk.telemetry.DistanceSensorKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry.TelemetryProto.DistanceSensor =
  io.mavsdk.telemetry.DistanceSensorKt.Dsl._create(io.mavsdk.telemetry.TelemetryProto.DistanceSensor.newBuilder()).apply { block() }._build()
/**
 * ```
 * DistanceSensor message type.
 * ```
 *
 * Protobuf type `mavsdk.rpc.telemetry.DistanceSensor`
 */
public object DistanceSensorKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.telemetry.TelemetryProto.DistanceSensor.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.telemetry.TelemetryProto.DistanceSensor.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.telemetry.TelemetryProto.DistanceSensor = _builder.build()

    /**
     * <pre>
     * Minimum distance the sensor can measure, NaN if unknown.
     * </pre>
     *
     * <code>float minimum_distance_m = 1 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var minimumDistanceM: kotlin.Float
      @JvmName("getMinimumDistanceM")
      get() = _builder.getMinimumDistanceM()
      @JvmName("setMinimumDistanceM")
      set(value) {
        _builder.setMinimumDistanceM(value)
      }
    /**
     * ```
     * Minimum distance the sensor can measure, NaN if unknown.
     * ```
     *
     * `float minimum_distance_m = 1 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearMinimumDistanceM() {
      _builder.clearMinimumDistanceM()
    }

    /**
     * <pre>
     * Maximum distance the sensor can measure, NaN if unknown.
     * </pre>
     *
     * <code>float maximum_distance_m = 2 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var maximumDistanceM: kotlin.Float
      @JvmName("getMaximumDistanceM")
      get() = _builder.getMaximumDistanceM()
      @JvmName("setMaximumDistanceM")
      set(value) {
        _builder.setMaximumDistanceM(value)
      }
    /**
     * ```
     * Maximum distance the sensor can measure, NaN if unknown.
     * ```
     *
     * `float maximum_distance_m = 2 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearMaximumDistanceM() {
      _builder.clearMaximumDistanceM()
    }

    /**
     * <pre>
     * Current distance reading, NaN if unknown.
     * </pre>
     *
     * <code>float current_distance_m = 3 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var currentDistanceM: kotlin.Float
      @JvmName("getCurrentDistanceM")
      get() = _builder.getCurrentDistanceM()
      @JvmName("setCurrentDistanceM")
      set(value) {
        _builder.setCurrentDistanceM(value)
      }
    /**
     * ```
     * Current distance reading, NaN if unknown.
     * ```
     *
     * `float current_distance_m = 3 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearCurrentDistanceM() {
      _builder.clearCurrentDistanceM()
    }

    /**
     * ```
     * Sensor Orientation reading.
     * ```
     *
     * `.mavsdk.rpc.telemetry.EulerAngle orientation = 4;`
     */
    public var orientation: io.mavsdk.telemetry.TelemetryProto.EulerAngle
      @JvmName("getOrientation")
      get() = _builder.getOrientation()
      @JvmName("setOrientation")
      set(value) {
        _builder.setOrientation(value)
      }
    /**
     * ```
     * Sensor Orientation reading.
     * ```
     *
     * `.mavsdk.rpc.telemetry.EulerAngle orientation = 4;`
     */
    public fun clearOrientation() {
      _builder.clearOrientation()
    }
    /**
     * ```
     * Sensor Orientation reading.
     * ```
     *
     * `.mavsdk.rpc.telemetry.EulerAngle orientation = 4;`
     * @return Whether the orientation field is set.
     */
    public fun hasOrientation(): kotlin.Boolean {
      return _builder.hasOrientation()
    }
  }
}
public inline fun io.mavsdk.telemetry.TelemetryProto.DistanceSensor.copy(block: `io.mavsdk.telemetry`.DistanceSensorKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry.TelemetryProto.DistanceSensor =
  `io.mavsdk.telemetry`.DistanceSensorKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val io.mavsdk.telemetry.TelemetryProto.DistanceSensorOrBuilder.orientationOrNull: io.mavsdk.telemetry.TelemetryProto.EulerAngle?
  get() = if (hasOrientation()) getOrientation() else null

