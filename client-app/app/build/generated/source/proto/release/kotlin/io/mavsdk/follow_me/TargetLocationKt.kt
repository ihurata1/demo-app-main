// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/follow_me/follow_me.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.follow_me;

@kotlin.jvm.JvmName("-initializetargetLocation")
public inline fun targetLocation(block: io.mavsdk.follow_me.TargetLocationKt.Dsl.() -> kotlin.Unit): io.mavsdk.follow_me.FollowMeProto.TargetLocation =
  io.mavsdk.follow_me.TargetLocationKt.Dsl._create(io.mavsdk.follow_me.FollowMeProto.TargetLocation.newBuilder()).apply { block() }._build()
/**
 * ```
 * Target location for the vehicle to follow
 * ```
 *
 * Protobuf type `mavsdk.rpc.follow_me.TargetLocation`
 */
public object TargetLocationKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.follow_me.FollowMeProto.TargetLocation.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.follow_me.FollowMeProto.TargetLocation.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.follow_me.FollowMeProto.TargetLocation = _builder.build()

    /**
     * <pre>
     * Target latitude in degrees
     * </pre>
     *
     * <code>double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var latitudeDeg: kotlin.Double
      @JvmName("getLatitudeDeg")
      get() = _builder.getLatitudeDeg()
      @JvmName("setLatitudeDeg")
      set(value) {
        _builder.setLatitudeDeg(value)
      }
    /**
     * ```
     * Target latitude in degrees
     * ```
     *
     * `double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearLatitudeDeg() {
      _builder.clearLatitudeDeg()
    }

    /**
     * <pre>
     * Target longitude in degrees
     * </pre>
     *
     * <code>double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var longitudeDeg: kotlin.Double
      @JvmName("getLongitudeDeg")
      get() = _builder.getLongitudeDeg()
      @JvmName("setLongitudeDeg")
      set(value) {
        _builder.setLongitudeDeg(value)
      }
    /**
     * ```
     * Target longitude in degrees
     * ```
     *
     * `double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearLongitudeDeg() {
      _builder.clearLongitudeDeg()
    }

    /**
     * <pre>
     * Target altitude in meters above MSL
     * </pre>
     *
     * <code>float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var absoluteAltitudeM: kotlin.Float
      @JvmName("getAbsoluteAltitudeM")
      get() = _builder.getAbsoluteAltitudeM()
      @JvmName("setAbsoluteAltitudeM")
      set(value) {
        _builder.setAbsoluteAltitudeM(value)
      }
    /**
     * ```
     * Target altitude in meters above MSL
     * ```
     *
     * `float absolute_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearAbsoluteAltitudeM() {
      _builder.clearAbsoluteAltitudeM()
    }

    /**
     * <pre>
     * Target velocity in X axis, in meters per second
     * </pre>
     *
     * <code>float velocity_x_m_s = 4 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var velocityXMS: kotlin.Float
      @JvmName("getVelocityXMS")
      get() = _builder.getVelocityXMS()
      @JvmName("setVelocityXMS")
      set(value) {
        _builder.setVelocityXMS(value)
      }
    /**
     * ```
     * Target velocity in X axis, in meters per second
     * ```
     *
     * `float velocity_x_m_s = 4 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearVelocityXMS() {
      _builder.clearVelocityXMS()
    }

    /**
     * <pre>
     * Target velocity in Y axis, in meters per second
     * </pre>
     *
     * <code>float velocity_y_m_s = 5 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var velocityYMS: kotlin.Float
      @JvmName("getVelocityYMS")
      get() = _builder.getVelocityYMS()
      @JvmName("setVelocityYMS")
      set(value) {
        _builder.setVelocityYMS(value)
      }
    /**
     * ```
     * Target velocity in Y axis, in meters per second
     * ```
     *
     * `float velocity_y_m_s = 5 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearVelocityYMS() {
      _builder.clearVelocityYMS()
    }

    /**
     * <pre>
     * Target velocity in Z axis, in meters per second
     * </pre>
     *
     * <code>float velocity_z_m_s = 6 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var velocityZMS: kotlin.Float
      @JvmName("getVelocityZMS")
      get() = _builder.getVelocityZMS()
      @JvmName("setVelocityZMS")
      set(value) {
        _builder.setVelocityZMS(value)
      }
    /**
     * ```
     * Target velocity in Z axis, in meters per second
     * ```
     *
     * `float velocity_z_m_s = 6 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearVelocityZMS() {
      _builder.clearVelocityZMS()
    }
  }
}
public inline fun io.mavsdk.follow_me.FollowMeProto.TargetLocation.copy(block: `io.mavsdk.follow_me`.TargetLocationKt.Dsl.() -> kotlin.Unit): io.mavsdk.follow_me.FollowMeProto.TargetLocation =
  `io.mavsdk.follow_me`.TargetLocationKt.Dsl._create(this.toBuilder()).apply { block() }._build()

