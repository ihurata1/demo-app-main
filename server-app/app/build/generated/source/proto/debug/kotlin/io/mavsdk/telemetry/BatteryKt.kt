// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/telemetry/telemetry.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.telemetry;

@kotlin.jvm.JvmName("-initializebattery")
public inline fun battery(block: io.mavsdk.telemetry.BatteryKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry.TelemetryProto.Battery =
  io.mavsdk.telemetry.BatteryKt.Dsl._create(io.mavsdk.telemetry.TelemetryProto.Battery.newBuilder()).apply { block() }._build()
/**
 * ```
 * Battery type.
 * ```
 *
 * Protobuf type `mavsdk.rpc.telemetry.Battery`
 */
public object BatteryKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.telemetry.TelemetryProto.Battery.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.telemetry.TelemetryProto.Battery.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.telemetry.TelemetryProto.Battery = _builder.build()

    /**
     * <pre>
     * Battery ID, for systems with multiple batteries
     * </pre>
     *
     * <code>uint32 id = 1 [(.mavsdk.options.default_value) = "0"];</code>
     */
    public var id: kotlin.Int
      @JvmName("getId")
      get() = _builder.getId()
      @JvmName("setId")
      set(value) {
        _builder.setId(value)
      }
    /**
     * ```
     * Battery ID, for systems with multiple batteries
     * ```
     *
     * `uint32 id = 1 [(.mavsdk.options.default_value) = "0"];`
     */
    public fun clearId() {
      _builder.clearId()
    }

    /**
     * <pre>
     * Temperature of the battery in degrees Celsius. NAN for unknown temperature
     * </pre>
     *
     * <code>float temperature_degc = 2 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var temperatureDegc: kotlin.Float
      @JvmName("getTemperatureDegc")
      get() = _builder.getTemperatureDegc()
      @JvmName("setTemperatureDegc")
      set(value) {
        _builder.setTemperatureDegc(value)
      }
    /**
     * ```
     * Temperature of the battery in degrees Celsius. NAN for unknown temperature
     * ```
     *
     * `float temperature_degc = 2 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearTemperatureDegc() {
      _builder.clearTemperatureDegc()
    }

    /**
     * <pre>
     * Voltage in volts
     * </pre>
     *
     * <code>float voltage_v = 3 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var voltageV: kotlin.Float
      @JvmName("getVoltageV")
      get() = _builder.getVoltageV()
      @JvmName("setVoltageV")
      set(value) {
        _builder.setVoltageV(value)
      }
    /**
     * ```
     * Voltage in volts
     * ```
     *
     * `float voltage_v = 3 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearVoltageV() {
      _builder.clearVoltageV()
    }

    /**
     * <pre>
     * Battery current in Amps, NAN if autopilot does not measure the current
     * </pre>
     *
     * <code>float current_battery_a = 4 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var currentBatteryA: kotlin.Float
      @JvmName("getCurrentBatteryA")
      get() = _builder.getCurrentBatteryA()
      @JvmName("setCurrentBatteryA")
      set(value) {
        _builder.setCurrentBatteryA(value)
      }
    /**
     * ```
     * Battery current in Amps, NAN if autopilot does not measure the current
     * ```
     *
     * `float current_battery_a = 4 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearCurrentBatteryA() {
      _builder.clearCurrentBatteryA()
    }

    /**
     * <pre>
     * Consumed charge in Amp hours, NAN if autopilot does not provide consumption estimate
     * </pre>
     *
     * <code>float capacity_consumed_ah = 5 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var capacityConsumedAh: kotlin.Float
      @JvmName("getCapacityConsumedAh")
      get() = _builder.getCapacityConsumedAh()
      @JvmName("setCapacityConsumedAh")
      set(value) {
        _builder.setCapacityConsumedAh(value)
      }
    /**
     * ```
     * Consumed charge in Amp hours, NAN if autopilot does not provide consumption estimate
     * ```
     *
     * `float capacity_consumed_ah = 5 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearCapacityConsumedAh() {
      _builder.clearCapacityConsumedAh()
    }

    /**
     * <pre>
     * Estimated battery remaining (range: 0 to 100)
     * </pre>
     *
     * <code>float remaining_percent = 6 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var remainingPercent: kotlin.Float
      @JvmName("getRemainingPercent")
      get() = _builder.getRemainingPercent()
      @JvmName("setRemainingPercent")
      set(value) {
        _builder.setRemainingPercent(value)
      }
    /**
     * ```
     * Estimated battery remaining (range: 0 to 100)
     * ```
     *
     * `float remaining_percent = 6 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearRemainingPercent() {
      _builder.clearRemainingPercent()
    }
  }
}
public inline fun io.mavsdk.telemetry.TelemetryProto.Battery.copy(block: `io.mavsdk.telemetry`.BatteryKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry.TelemetryProto.Battery =
  `io.mavsdk.telemetry`.BatteryKt.Dsl._create(this.toBuilder()).apply { block() }._build()

