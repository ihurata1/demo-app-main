// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/telemetry/telemetry.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.telemetry;

@kotlin.jvm.JvmName("-initializeodometry")
public inline fun odometry(block: io.mavsdk.telemetry.OdometryKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry.TelemetryProto.Odometry =
  io.mavsdk.telemetry.OdometryKt.Dsl._create(io.mavsdk.telemetry.TelemetryProto.Odometry.newBuilder()).apply { block() }._build()
/**
 * ```
 * Odometry message type.
 * ```
 *
 * Protobuf type `mavsdk.rpc.telemetry.Odometry`
 */
public object OdometryKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.telemetry.TelemetryProto.Odometry.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.telemetry.TelemetryProto.Odometry.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.telemetry.TelemetryProto.Odometry = _builder.build()

    /**
     * <pre>
     * Timestamp (0 to use Backend timestamp).
     * </pre>
     *
     * <code>uint64 time_usec = 1;</code>
     */
    public var timeUsec: kotlin.Long
      @JvmName("getTimeUsec")
      get() = _builder.getTimeUsec()
      @JvmName("setTimeUsec")
      set(value) {
        _builder.setTimeUsec(value)
      }
    /**
     * ```
     * Timestamp (0 to use Backend timestamp).
     * ```
     *
     * `uint64 time_usec = 1;`
     */
    public fun clearTimeUsec() {
      _builder.clearTimeUsec()
    }

    /**
     * ```
     * Coordinate frame of reference for the pose data.
     * ```
     *
     * `.mavsdk.rpc.telemetry.Odometry.MavFrame frame_id = 2;`
     */
    public var frameId: io.mavsdk.telemetry.TelemetryProto.Odometry.MavFrame
      @JvmName("getFrameId")
      get() = _builder.getFrameId()
      @JvmName("setFrameId")
      set(value) {
        _builder.setFrameId(value)
      }
    public var frameIdValue: kotlin.Int
      @JvmName("getFrameIdValue")
      get() = _builder.getFrameIdValue()
      @JvmName("setFrameIdValue")
      set(value) {
        _builder.setFrameIdValue(value)
      }
    /**
     * ```
     * Coordinate frame of reference for the pose data.
     * ```
     *
     * `.mavsdk.rpc.telemetry.Odometry.MavFrame frame_id = 2;`
     */
    public fun clearFrameId() {
      _builder.clearFrameId()
    }

    /**
     * ```
     * Coordinate frame of reference for the velocity in free space (twist) data.
     * ```
     *
     * `.mavsdk.rpc.telemetry.Odometry.MavFrame child_frame_id = 3;`
     */
    public var childFrameId: io.mavsdk.telemetry.TelemetryProto.Odometry.MavFrame
      @JvmName("getChildFrameId")
      get() = _builder.getChildFrameId()
      @JvmName("setChildFrameId")
      set(value) {
        _builder.setChildFrameId(value)
      }
    public var childFrameIdValue: kotlin.Int
      @JvmName("getChildFrameIdValue")
      get() = _builder.getChildFrameIdValue()
      @JvmName("setChildFrameIdValue")
      set(value) {
        _builder.setChildFrameIdValue(value)
      }
    /**
     * ```
     * Coordinate frame of reference for the velocity in free space (twist) data.
     * ```
     *
     * `.mavsdk.rpc.telemetry.Odometry.MavFrame child_frame_id = 3;`
     */
    public fun clearChildFrameId() {
      _builder.clearChildFrameId()
    }

    /**
     * ```
     * Position.
     * ```
     *
     * `.mavsdk.rpc.telemetry.PositionBody position_body = 4;`
     */
    public var positionBody: io.mavsdk.telemetry.TelemetryProto.PositionBody
      @JvmName("getPositionBody")
      get() = _builder.getPositionBody()
      @JvmName("setPositionBody")
      set(value) {
        _builder.setPositionBody(value)
      }
    /**
     * ```
     * Position.
     * ```
     *
     * `.mavsdk.rpc.telemetry.PositionBody position_body = 4;`
     */
    public fun clearPositionBody() {
      _builder.clearPositionBody()
    }
    /**
     * ```
     * Position.
     * ```
     *
     * `.mavsdk.rpc.telemetry.PositionBody position_body = 4;`
     * @return Whether the positionBody field is set.
     */
    public fun hasPositionBody(): kotlin.Boolean {
      return _builder.hasPositionBody()
    }

    /**
     * ```
     * Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation).
     * ```
     *
     * `.mavsdk.rpc.telemetry.Quaternion q = 5;`
     */
    public var q: io.mavsdk.telemetry.TelemetryProto.Quaternion
      @JvmName("getQ")
      get() = _builder.getQ()
      @JvmName("setQ")
      set(value) {
        _builder.setQ(value)
      }
    /**
     * ```
     * Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation).
     * ```
     *
     * `.mavsdk.rpc.telemetry.Quaternion q = 5;`
     */
    public fun clearQ() {
      _builder.clearQ()
    }
    /**
     * ```
     * Quaternion components, w, x, y, z (1 0 0 0 is the null-rotation).
     * ```
     *
     * `.mavsdk.rpc.telemetry.Quaternion q = 5;`
     * @return Whether the q field is set.
     */
    public fun hasQ(): kotlin.Boolean {
      return _builder.hasQ()
    }

    /**
     * ```
     * Linear velocity (m/s).
     * ```
     *
     * `.mavsdk.rpc.telemetry.VelocityBody velocity_body = 6;`
     */
    public var velocityBody: io.mavsdk.telemetry.TelemetryProto.VelocityBody
      @JvmName("getVelocityBody")
      get() = _builder.getVelocityBody()
      @JvmName("setVelocityBody")
      set(value) {
        _builder.setVelocityBody(value)
      }
    /**
     * ```
     * Linear velocity (m/s).
     * ```
     *
     * `.mavsdk.rpc.telemetry.VelocityBody velocity_body = 6;`
     */
    public fun clearVelocityBody() {
      _builder.clearVelocityBody()
    }
    /**
     * ```
     * Linear velocity (m/s).
     * ```
     *
     * `.mavsdk.rpc.telemetry.VelocityBody velocity_body = 6;`
     * @return Whether the velocityBody field is set.
     */
    public fun hasVelocityBody(): kotlin.Boolean {
      return _builder.hasVelocityBody()
    }

    /**
     * ```
     * Angular velocity (rad/s).
     * ```
     *
     * `.mavsdk.rpc.telemetry.AngularVelocityBody angular_velocity_body = 7;`
     */
    public var angularVelocityBody: io.mavsdk.telemetry.TelemetryProto.AngularVelocityBody
      @JvmName("getAngularVelocityBody")
      get() = _builder.getAngularVelocityBody()
      @JvmName("setAngularVelocityBody")
      set(value) {
        _builder.setAngularVelocityBody(value)
      }
    /**
     * ```
     * Angular velocity (rad/s).
     * ```
     *
     * `.mavsdk.rpc.telemetry.AngularVelocityBody angular_velocity_body = 7;`
     */
    public fun clearAngularVelocityBody() {
      _builder.clearAngularVelocityBody()
    }
    /**
     * ```
     * Angular velocity (rad/s).
     * ```
     *
     * `.mavsdk.rpc.telemetry.AngularVelocityBody angular_velocity_body = 7;`
     * @return Whether the angularVelocityBody field is set.
     */
    public fun hasAngularVelocityBody(): kotlin.Boolean {
      return _builder.hasAngularVelocityBody()
    }

    /**
     * ```
     * Pose cross-covariance matrix.
     * ```
     *
     * `.mavsdk.rpc.telemetry.Covariance pose_covariance = 8;`
     */
    public var poseCovariance: io.mavsdk.telemetry.TelemetryProto.Covariance
      @JvmName("getPoseCovariance")
      get() = _builder.getPoseCovariance()
      @JvmName("setPoseCovariance")
      set(value) {
        _builder.setPoseCovariance(value)
      }
    /**
     * ```
     * Pose cross-covariance matrix.
     * ```
     *
     * `.mavsdk.rpc.telemetry.Covariance pose_covariance = 8;`
     */
    public fun clearPoseCovariance() {
      _builder.clearPoseCovariance()
    }
    /**
     * ```
     * Pose cross-covariance matrix.
     * ```
     *
     * `.mavsdk.rpc.telemetry.Covariance pose_covariance = 8;`
     * @return Whether the poseCovariance field is set.
     */
    public fun hasPoseCovariance(): kotlin.Boolean {
      return _builder.hasPoseCovariance()
    }

    /**
     * ```
     * Velocity cross-covariance matrix.
     * ```
     *
     * `.mavsdk.rpc.telemetry.Covariance velocity_covariance = 9;`
     */
    public var velocityCovariance: io.mavsdk.telemetry.TelemetryProto.Covariance
      @JvmName("getVelocityCovariance")
      get() = _builder.getVelocityCovariance()
      @JvmName("setVelocityCovariance")
      set(value) {
        _builder.setVelocityCovariance(value)
      }
    /**
     * ```
     * Velocity cross-covariance matrix.
     * ```
     *
     * `.mavsdk.rpc.telemetry.Covariance velocity_covariance = 9;`
     */
    public fun clearVelocityCovariance() {
      _builder.clearVelocityCovariance()
    }
    /**
     * ```
     * Velocity cross-covariance matrix.
     * ```
     *
     * `.mavsdk.rpc.telemetry.Covariance velocity_covariance = 9;`
     * @return Whether the velocityCovariance field is set.
     */
    public fun hasVelocityCovariance(): kotlin.Boolean {
      return _builder.hasVelocityCovariance()
    }
  }
}
public inline fun io.mavsdk.telemetry.TelemetryProto.Odometry.copy(block: `io.mavsdk.telemetry`.OdometryKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry.TelemetryProto.Odometry =
  `io.mavsdk.telemetry`.OdometryKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val io.mavsdk.telemetry.TelemetryProto.OdometryOrBuilder.positionBodyOrNull: io.mavsdk.telemetry.TelemetryProto.PositionBody?
  get() = if (hasPositionBody()) getPositionBody() else null

public val io.mavsdk.telemetry.TelemetryProto.OdometryOrBuilder.qOrNull: io.mavsdk.telemetry.TelemetryProto.Quaternion?
  get() = if (hasQ()) getQ() else null

public val io.mavsdk.telemetry.TelemetryProto.OdometryOrBuilder.velocityBodyOrNull: io.mavsdk.telemetry.TelemetryProto.VelocityBody?
  get() = if (hasVelocityBody()) getVelocityBody() else null

public val io.mavsdk.telemetry.TelemetryProto.OdometryOrBuilder.angularVelocityBodyOrNull: io.mavsdk.telemetry.TelemetryProto.AngularVelocityBody?
  get() = if (hasAngularVelocityBody()) getAngularVelocityBody() else null

public val io.mavsdk.telemetry.TelemetryProto.OdometryOrBuilder.poseCovarianceOrNull: io.mavsdk.telemetry.TelemetryProto.Covariance?
  get() = if (hasPoseCovariance()) getPoseCovariance() else null

public val io.mavsdk.telemetry.TelemetryProto.OdometryOrBuilder.velocityCovarianceOrNull: io.mavsdk.telemetry.TelemetryProto.Covariance?
  get() = if (hasVelocityCovariance()) getVelocityCovariance() else null

