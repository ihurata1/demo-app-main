// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/gimbal/gimbal.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.gimbal;

@kotlin.jvm.JvmName("-initializecontrolStatus")
public inline fun controlStatus(block: io.mavsdk.gimbal.ControlStatusKt.Dsl.() -> kotlin.Unit): io.mavsdk.gimbal.GimbalProto.ControlStatus =
  io.mavsdk.gimbal.ControlStatusKt.Dsl._create(io.mavsdk.gimbal.GimbalProto.ControlStatus.newBuilder()).apply { block() }._build()
/**
 * ```
 * Control status
 * ```
 *
 * Protobuf type `mavsdk.rpc.gimbal.ControlStatus`
 */
public object ControlStatusKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.gimbal.GimbalProto.ControlStatus.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.gimbal.GimbalProto.ControlStatus.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.gimbal.GimbalProto.ControlStatus = _builder.build()

    /**
     * ```
     * Control mode (none, primary or secondary)
     * ```
     *
     * `.mavsdk.rpc.gimbal.ControlMode control_mode = 1;`
     */
    public var controlMode: io.mavsdk.gimbal.GimbalProto.ControlMode
      @JvmName("getControlMode")
      get() = _builder.getControlMode()
      @JvmName("setControlMode")
      set(value) {
        _builder.setControlMode(value)
      }
    public var controlModeValue: kotlin.Int
      @JvmName("getControlModeValue")
      get() = _builder.getControlModeValue()
      @JvmName("setControlModeValue")
      set(value) {
        _builder.setControlModeValue(value)
      }
    /**
     * ```
     * Control mode (none, primary or secondary)
     * ```
     *
     * `.mavsdk.rpc.gimbal.ControlMode control_mode = 1;`
     */
    public fun clearControlMode() {
      _builder.clearControlMode()
    }

    /**
     * <pre>
     * Sysid of the component that has primary control over the gimbal (0 if no one is in control)
     * </pre>
     *
     * <code>int32 sysid_primary_control = 2;</code>
     */
    public var sysidPrimaryControl: kotlin.Int
      @JvmName("getSysidPrimaryControl")
      get() = _builder.getSysidPrimaryControl()
      @JvmName("setSysidPrimaryControl")
      set(value) {
        _builder.setSysidPrimaryControl(value)
      }
    /**
     * ```
     * Sysid of the component that has primary control over the gimbal (0 if no one is in control)
     * ```
     *
     * `int32 sysid_primary_control = 2;`
     */
    public fun clearSysidPrimaryControl() {
      _builder.clearSysidPrimaryControl()
    }

    /**
     * <pre>
     * Compid of the component that has primary control over the gimbal (0 if no one is in control)
     * </pre>
     *
     * <code>int32 compid_primary_control = 3;</code>
     */
    public var compidPrimaryControl: kotlin.Int
      @JvmName("getCompidPrimaryControl")
      get() = _builder.getCompidPrimaryControl()
      @JvmName("setCompidPrimaryControl")
      set(value) {
        _builder.setCompidPrimaryControl(value)
      }
    /**
     * ```
     * Compid of the component that has primary control over the gimbal (0 if no one is in control)
     * ```
     *
     * `int32 compid_primary_control = 3;`
     */
    public fun clearCompidPrimaryControl() {
      _builder.clearCompidPrimaryControl()
    }

    /**
     * <pre>
     * Sysid of the component that has secondary control over the gimbal (0 if no one is in control)
     * </pre>
     *
     * <code>int32 sysid_secondary_control = 4;</code>
     */
    public var sysidSecondaryControl: kotlin.Int
      @JvmName("getSysidSecondaryControl")
      get() = _builder.getSysidSecondaryControl()
      @JvmName("setSysidSecondaryControl")
      set(value) {
        _builder.setSysidSecondaryControl(value)
      }
    /**
     * ```
     * Sysid of the component that has secondary control over the gimbal (0 if no one is in control)
     * ```
     *
     * `int32 sysid_secondary_control = 4;`
     */
    public fun clearSysidSecondaryControl() {
      _builder.clearSysidSecondaryControl()
    }

    /**
     * <pre>
     * Compid of the component that has secondary control over the gimbal (0 if no one is in control)
     * </pre>
     *
     * <code>int32 compid_secondary_control = 5;</code>
     */
    public var compidSecondaryControl: kotlin.Int
      @JvmName("getCompidSecondaryControl")
      get() = _builder.getCompidSecondaryControl()
      @JvmName("setCompidSecondaryControl")
      set(value) {
        _builder.setCompidSecondaryControl(value)
      }
    /**
     * ```
     * Compid of the component that has secondary control over the gimbal (0 if no one is in control)
     * ```
     *
     * `int32 compid_secondary_control = 5;`
     */
    public fun clearCompidSecondaryControl() {
      _builder.clearCompidSecondaryControl()
    }
  }
}
public inline fun io.mavsdk.gimbal.GimbalProto.ControlStatus.copy(block: `io.mavsdk.gimbal`.ControlStatusKt.Dsl.() -> kotlin.Unit): io.mavsdk.gimbal.GimbalProto.ControlStatus =
  `io.mavsdk.gimbal`.ControlStatusKt.Dsl._create(this.toBuilder()).apply { block() }._build()

