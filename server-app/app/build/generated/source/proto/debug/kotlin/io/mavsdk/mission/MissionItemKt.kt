// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/mission/mission.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.mission;

@kotlin.jvm.JvmName("-initializemissionItem")
public inline fun missionItem(block: io.mavsdk.mission.MissionItemKt.Dsl.() -> kotlin.Unit): io.mavsdk.mission.MissionProto.MissionItem =
  io.mavsdk.mission.MissionItemKt.Dsl._create(io.mavsdk.mission.MissionProto.MissionItem.newBuilder()).apply { block() }._build()
/**
 * ```
 *
 * Type representing a mission item.
 *
 * A MissionItem can contain a position and/or actions.
 * Mission items are building blocks to assemble a mission,
 * which can be sent to (or received from) a system.
 * They cannot be used independently.
 * ```
 *
 * Protobuf type `mavsdk.rpc.mission.MissionItem`
 */
public object MissionItemKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.mission.MissionProto.MissionItem.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.mission.MissionProto.MissionItem.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.mission.MissionProto.MissionItem = _builder.build()

    /**
     * <pre>
     * Latitude in degrees (range: -90 to +90)
     * </pre>
     *
     * <code>double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 1e-07];</code>
     */
    public var latitudeDeg: kotlin.Double
      @JvmName("getLatitudeDeg")
      get() = _builder.getLatitudeDeg()
      @JvmName("setLatitudeDeg")
      set(value) {
        _builder.setLatitudeDeg(value)
      }
    /**
     * ```
     * Latitude in degrees (range: -90 to +90)
     * ```
     *
     * `double latitude_deg = 1 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 1e-07];`
     */
    public fun clearLatitudeDeg() {
      _builder.clearLatitudeDeg()
    }

    /**
     * <pre>
     * Longitude in degrees (range: -180 to +180)
     * </pre>
     *
     * <code>double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 1e-07];</code>
     */
    public var longitudeDeg: kotlin.Double
      @JvmName("getLongitudeDeg")
      get() = _builder.getLongitudeDeg()
      @JvmName("setLongitudeDeg")
      set(value) {
        _builder.setLongitudeDeg(value)
      }
    /**
     * ```
     * Longitude in degrees (range: -180 to +180)
     * ```
     *
     * `double longitude_deg = 2 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 1e-07];`
     */
    public fun clearLongitudeDeg() {
      _builder.clearLongitudeDeg()
    }

    /**
     * <pre>
     * Altitude relative to takeoff altitude in metres
     * </pre>
     *
     * <code>float relative_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var relativeAltitudeM: kotlin.Float
      @JvmName("getRelativeAltitudeM")
      get() = _builder.getRelativeAltitudeM()
      @JvmName("setRelativeAltitudeM")
      set(value) {
        _builder.setRelativeAltitudeM(value)
      }
    /**
     * ```
     * Altitude relative to takeoff altitude in metres
     * ```
     *
     * `float relative_altitude_m = 3 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearRelativeAltitudeM() {
      _builder.clearRelativeAltitudeM()
    }

    /**
     * <pre>
     * Speed to use after this mission item (in metres/second)
     * </pre>
     *
     * <code>float speed_m_s = 4 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var speedMS: kotlin.Float
      @JvmName("getSpeedMS")
      get() = _builder.getSpeedMS()
      @JvmName("setSpeedMS")
      set(value) {
        _builder.setSpeedMS(value)
      }
    /**
     * ```
     * Speed to use after this mission item (in metres/second)
     * ```
     *
     * `float speed_m_s = 4 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearSpeedMS() {
      _builder.clearSpeedMS()
    }

    /**
     * <pre>
     * True will make the drone fly through without stopping, while false will make the drone stop on the waypoint
     * </pre>
     *
     * <code>bool is_fly_through = 5 [(.mavsdk.options.default_value) = "false"];</code>
     */
    public var isFlyThrough: kotlin.Boolean
      @JvmName("getIsFlyThrough")
      get() = _builder.getIsFlyThrough()
      @JvmName("setIsFlyThrough")
      set(value) {
        _builder.setIsFlyThrough(value)
      }
    /**
     * ```
     * True will make the drone fly through without stopping, while false will make the drone stop on the waypoint
     * ```
     *
     * `bool is_fly_through = 5 [(.mavsdk.options.default_value) = "false"];`
     */
    public fun clearIsFlyThrough() {
      _builder.clearIsFlyThrough()
    }

    /**
     * <pre>
     * Gimbal pitch (in degrees)
     * </pre>
     *
     * <code>float gimbal_pitch_deg = 6 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 0.0001];</code>
     */
    public var gimbalPitchDeg: kotlin.Float
      @JvmName("getGimbalPitchDeg")
      get() = _builder.getGimbalPitchDeg()
      @JvmName("setGimbalPitchDeg")
      set(value) {
        _builder.setGimbalPitchDeg(value)
      }
    /**
     * ```
     * Gimbal pitch (in degrees)
     * ```
     *
     * `float gimbal_pitch_deg = 6 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 0.0001];`
     */
    public fun clearGimbalPitchDeg() {
      _builder.clearGimbalPitchDeg()
    }

    /**
     * <pre>
     * Gimbal yaw (in degrees)
     * </pre>
     *
     * <code>float gimbal_yaw_deg = 7 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 0.0001];</code>
     */
    public var gimbalYawDeg: kotlin.Float
      @JvmName("getGimbalYawDeg")
      get() = _builder.getGimbalYawDeg()
      @JvmName("setGimbalYawDeg")
      set(value) {
        _builder.setGimbalYawDeg(value)
      }
    /**
     * ```
     * Gimbal yaw (in degrees)
     * ```
     *
     * `float gimbal_yaw_deg = 7 [(.mavsdk.options.default_value) = "NaN", (.mavsdk.options.epsilon) = 0.0001];`
     */
    public fun clearGimbalYawDeg() {
      _builder.clearGimbalYawDeg()
    }

    /**
     * ```
     * Camera action to trigger at this mission item
     * ```
     *
     * `.mavsdk.rpc.mission.MissionItem.CameraAction camera_action = 8;`
     */
    public var cameraAction: io.mavsdk.mission.MissionProto.MissionItem.CameraAction
      @JvmName("getCameraAction")
      get() = _builder.getCameraAction()
      @JvmName("setCameraAction")
      set(value) {
        _builder.setCameraAction(value)
      }
    public var cameraActionValue: kotlin.Int
      @JvmName("getCameraActionValue")
      get() = _builder.getCameraActionValue()
      @JvmName("setCameraActionValue")
      set(value) {
        _builder.setCameraActionValue(value)
      }
    /**
     * ```
     * Camera action to trigger at this mission item
     * ```
     *
     * `.mavsdk.rpc.mission.MissionItem.CameraAction camera_action = 8;`
     */
    public fun clearCameraAction() {
      _builder.clearCameraAction()
    }

    /**
     * <pre>
     * Loiter time (in seconds)
     * </pre>
     *
     * <code>float loiter_time_s = 9 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var loiterTimeS: kotlin.Float
      @JvmName("getLoiterTimeS")
      get() = _builder.getLoiterTimeS()
      @JvmName("setLoiterTimeS")
      set(value) {
        _builder.setLoiterTimeS(value)
      }
    /**
     * ```
     * Loiter time (in seconds)
     * ```
     *
     * `float loiter_time_s = 9 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearLoiterTimeS() {
      _builder.clearLoiterTimeS()
    }

    /**
     * <pre>
     * Camera photo interval to use after this mission item (in seconds)
     * </pre>
     *
     * <code>double camera_photo_interval_s = 10 [(.mavsdk.options.default_value) = "1.0"];</code>
     */
    public var cameraPhotoIntervalS: kotlin.Double
      @JvmName("getCameraPhotoIntervalS")
      get() = _builder.getCameraPhotoIntervalS()
      @JvmName("setCameraPhotoIntervalS")
      set(value) {
        _builder.setCameraPhotoIntervalS(value)
      }
    /**
     * ```
     * Camera photo interval to use after this mission item (in seconds)
     * ```
     *
     * `double camera_photo_interval_s = 10 [(.mavsdk.options.default_value) = "1.0"];`
     */
    public fun clearCameraPhotoIntervalS() {
      _builder.clearCameraPhotoIntervalS()
    }

    /**
     * <pre>
     * Radius for completing a mission item (in metres)
     * </pre>
     *
     * <code>float acceptance_radius_m = 11 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var acceptanceRadiusM: kotlin.Float
      @JvmName("getAcceptanceRadiusM")
      get() = _builder.getAcceptanceRadiusM()
      @JvmName("setAcceptanceRadiusM")
      set(value) {
        _builder.setAcceptanceRadiusM(value)
      }
    /**
     * ```
     * Radius for completing a mission item (in metres)
     * ```
     *
     * `float acceptance_radius_m = 11 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearAcceptanceRadiusM() {
      _builder.clearAcceptanceRadiusM()
    }

    /**
     * <pre>
     * Absolute yaw angle (in degrees)
     * </pre>
     *
     * <code>float yaw_deg = 12 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var yawDeg: kotlin.Float
      @JvmName("getYawDeg")
      get() = _builder.getYawDeg()
      @JvmName("setYawDeg")
      set(value) {
        _builder.setYawDeg(value)
      }
    /**
     * ```
     * Absolute yaw angle (in degrees)
     * ```
     *
     * `float yaw_deg = 12 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearYawDeg() {
      _builder.clearYawDeg()
    }

    /**
     * <pre>
     * Camera photo distance to use after this mission item (in meters)
     * </pre>
     *
     * <code>float camera_photo_distance_m = 13 [(.mavsdk.options.default_value) = "NAN"];</code>
     */
    public var cameraPhotoDistanceM: kotlin.Float
      @JvmName("getCameraPhotoDistanceM")
      get() = _builder.getCameraPhotoDistanceM()
      @JvmName("setCameraPhotoDistanceM")
      set(value) {
        _builder.setCameraPhotoDistanceM(value)
      }
    /**
     * ```
     * Camera photo distance to use after this mission item (in meters)
     * ```
     *
     * `float camera_photo_distance_m = 13 [(.mavsdk.options.default_value) = "NAN"];`
     */
    public fun clearCameraPhotoDistanceM() {
      _builder.clearCameraPhotoDistanceM()
    }

    /**
     * ```
     * Vehicle action to trigger at this mission item.
     * ```
     *
     * `.mavsdk.rpc.mission.MissionItem.VehicleAction vehicle_action = 14;`
     */
    public var vehicleAction: io.mavsdk.mission.MissionProto.MissionItem.VehicleAction
      @JvmName("getVehicleAction")
      get() = _builder.getVehicleAction()
      @JvmName("setVehicleAction")
      set(value) {
        _builder.setVehicleAction(value)
      }
    public var vehicleActionValue: kotlin.Int
      @JvmName("getVehicleActionValue")
      get() = _builder.getVehicleActionValue()
      @JvmName("setVehicleActionValue")
      set(value) {
        _builder.setVehicleActionValue(value)
      }
    /**
     * ```
     * Vehicle action to trigger at this mission item.
     * ```
     *
     * `.mavsdk.rpc.mission.MissionItem.VehicleAction vehicle_action = 14;`
     */
    public fun clearVehicleAction() {
      _builder.clearVehicleAction()
    }
  }
}
public inline fun io.mavsdk.mission.MissionProto.MissionItem.copy(block: `io.mavsdk.mission`.MissionItemKt.Dsl.() -> kotlin.Unit): io.mavsdk.mission.MissionProto.MissionItem =
  `io.mavsdk.mission`.MissionItemKt.Dsl._create(this.toBuilder()).apply { block() }._build()

