// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/calibration/calibration.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.calibration;

@kotlin.jvm.JvmName("-initializecalibrateGimbalAccelerometerResponse")
public inline fun calibrateGimbalAccelerometerResponse(block: io.mavsdk.calibration.CalibrateGimbalAccelerometerResponseKt.Dsl.() -> kotlin.Unit): io.mavsdk.calibration.CalibrationProto.CalibrateGimbalAccelerometerResponse =
  io.mavsdk.calibration.CalibrateGimbalAccelerometerResponseKt.Dsl._create(io.mavsdk.calibration.CalibrationProto.CalibrateGimbalAccelerometerResponse.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `mavsdk.rpc.calibration.CalibrateGimbalAccelerometerResponse`
 */
public object CalibrateGimbalAccelerometerResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.calibration.CalibrationProto.CalibrateGimbalAccelerometerResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.calibration.CalibrationProto.CalibrateGimbalAccelerometerResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.calibration.CalibrationProto.CalibrateGimbalAccelerometerResponse = _builder.build()

    /**
     * `.mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;`
     */
    public var calibrationResult: io.mavsdk.calibration.CalibrationProto.CalibrationResult
      @JvmName("getCalibrationResult")
      get() = _builder.getCalibrationResult()
      @JvmName("setCalibrationResult")
      set(value) {
        _builder.setCalibrationResult(value)
      }
    /**
     * `.mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;`
     */
    public fun clearCalibrationResult() {
      _builder.clearCalibrationResult()
    }
    /**
     * `.mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;`
     * @return Whether the calibrationResult field is set.
     */
    public fun hasCalibrationResult(): kotlin.Boolean {
      return _builder.hasCalibrationResult()
    }

    /**
     * ```
     * Progress data
     * ```
     *
     * `.mavsdk.rpc.calibration.ProgressData progress_data = 2;`
     */
    public var progressData: io.mavsdk.calibration.CalibrationProto.ProgressData
      @JvmName("getProgressData")
      get() = _builder.getProgressData()
      @JvmName("setProgressData")
      set(value) {
        _builder.setProgressData(value)
      }
    /**
     * ```
     * Progress data
     * ```
     *
     * `.mavsdk.rpc.calibration.ProgressData progress_data = 2;`
     */
    public fun clearProgressData() {
      _builder.clearProgressData()
    }
    /**
     * ```
     * Progress data
     * ```
     *
     * `.mavsdk.rpc.calibration.ProgressData progress_data = 2;`
     * @return Whether the progressData field is set.
     */
    public fun hasProgressData(): kotlin.Boolean {
      return _builder.hasProgressData()
    }
  }
}
public inline fun io.mavsdk.calibration.CalibrationProto.CalibrateGimbalAccelerometerResponse.copy(block: `io.mavsdk.calibration`.CalibrateGimbalAccelerometerResponseKt.Dsl.() -> kotlin.Unit): io.mavsdk.calibration.CalibrationProto.CalibrateGimbalAccelerometerResponse =
  `io.mavsdk.calibration`.CalibrateGimbalAccelerometerResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val io.mavsdk.calibration.CalibrationProto.CalibrateGimbalAccelerometerResponseOrBuilder.calibrationResultOrNull: io.mavsdk.calibration.CalibrationProto.CalibrationResult?
  get() = if (hasCalibrationResult()) getCalibrationResult() else null

public val io.mavsdk.calibration.CalibrationProto.CalibrateGimbalAccelerometerResponseOrBuilder.progressDataOrNull: io.mavsdk.calibration.CalibrationProto.ProgressData?
  get() = if (hasProgressData()) getProgressData() else null

