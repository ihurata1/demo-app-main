// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/action/action.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.action;

@kotlin.jvm.JvmName("-initializedoOrbitRequest")
public inline fun doOrbitRequest(block: io.mavsdk.action.DoOrbitRequestKt.Dsl.() -> kotlin.Unit): io.mavsdk.action.ActionProto.DoOrbitRequest =
  io.mavsdk.action.DoOrbitRequestKt.Dsl._create(io.mavsdk.action.ActionProto.DoOrbitRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `mavsdk.rpc.action.DoOrbitRequest`
 */
public object DoOrbitRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.action.ActionProto.DoOrbitRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.action.ActionProto.DoOrbitRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.action.ActionProto.DoOrbitRequest = _builder.build()

    /**
     * <pre>
     * Radius of circle (in meters)
     * </pre>
     *
     * <code>float radius_m = 1;</code>
     */
    public var radiusM: kotlin.Float
      @JvmName("getRadiusM")
      get() = _builder.getRadiusM()
      @JvmName("setRadiusM")
      set(value) {
        _builder.setRadiusM(value)
      }
    /**
     * ```
     * Radius of circle (in meters)
     * ```
     *
     * `float radius_m = 1;`
     */
    public fun clearRadiusM() {
      _builder.clearRadiusM()
    }

    /**
     * <pre>
     * Tangential velocity (in m/s)
     * </pre>
     *
     * <code>float velocity_ms = 2;</code>
     */
    public var velocityMs: kotlin.Float
      @JvmName("getVelocityMs")
      get() = _builder.getVelocityMs()
      @JvmName("setVelocityMs")
      set(value) {
        _builder.setVelocityMs(value)
      }
    /**
     * ```
     * Tangential velocity (in m/s)
     * ```
     *
     * `float velocity_ms = 2;`
     */
    public fun clearVelocityMs() {
      _builder.clearVelocityMs()
    }

    /**
     * ```
     * Yaw behavior of vehicle (ORBIT_YAW_BEHAVIOUR)
     * ```
     *
     * `.mavsdk.rpc.action.OrbitYawBehavior yaw_behavior = 3;`
     */
    public var yawBehavior: io.mavsdk.action.ActionProto.OrbitYawBehavior
      @JvmName("getYawBehavior")
      get() = _builder.getYawBehavior()
      @JvmName("setYawBehavior")
      set(value) {
        _builder.setYawBehavior(value)
      }
    public var yawBehaviorValue: kotlin.Int
      @JvmName("getYawBehaviorValue")
      get() = _builder.getYawBehaviorValue()
      @JvmName("setYawBehaviorValue")
      set(value) {
        _builder.setYawBehaviorValue(value)
      }
    /**
     * ```
     * Yaw behavior of vehicle (ORBIT_YAW_BEHAVIOUR)
     * ```
     *
     * `.mavsdk.rpc.action.OrbitYawBehavior yaw_behavior = 3;`
     */
    public fun clearYawBehavior() {
      _builder.clearYawBehavior()
    }

    /**
     * <pre>
     * Center point latitude in degrees. NAN: use current latitude for center
     * </pre>
     *
     * <code>double latitude_deg = 5 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var latitudeDeg: kotlin.Double
      @JvmName("getLatitudeDeg")
      get() = _builder.getLatitudeDeg()
      @JvmName("setLatitudeDeg")
      set(value) {
        _builder.setLatitudeDeg(value)
      }
    /**
     * ```
     * Center point latitude in degrees. NAN: use current latitude for center
     * ```
     *
     * `double latitude_deg = 5 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearLatitudeDeg() {
      _builder.clearLatitudeDeg()
    }

    /**
     * <pre>
     * Center point longitude in degrees. NAN: use current longitude for center
     * </pre>
     *
     * <code>double longitude_deg = 6 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var longitudeDeg: kotlin.Double
      @JvmName("getLongitudeDeg")
      get() = _builder.getLongitudeDeg()
      @JvmName("setLongitudeDeg")
      set(value) {
        _builder.setLongitudeDeg(value)
      }
    /**
     * ```
     * Center point longitude in degrees. NAN: use current longitude for center
     * ```
     *
     * `double longitude_deg = 6 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearLongitudeDeg() {
      _builder.clearLongitudeDeg()
    }

    /**
     * <pre>
     * Center point altitude in meters. NAN: use current altitude for center
     * </pre>
     *
     * <code>double absolute_altitude_m = 7 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var absoluteAltitudeM: kotlin.Double
      @JvmName("getAbsoluteAltitudeM")
      get() = _builder.getAbsoluteAltitudeM()
      @JvmName("setAbsoluteAltitudeM")
      set(value) {
        _builder.setAbsoluteAltitudeM(value)
      }
    /**
     * ```
     * Center point altitude in meters. NAN: use current altitude for center
     * ```
     *
     * `double absolute_altitude_m = 7 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearAbsoluteAltitudeM() {
      _builder.clearAbsoluteAltitudeM()
    }
  }
}
public inline fun io.mavsdk.action.ActionProto.DoOrbitRequest.copy(block: `io.mavsdk.action`.DoOrbitRequestKt.Dsl.() -> kotlin.Unit): io.mavsdk.action.ActionProto.DoOrbitRequest =
  `io.mavsdk.action`.DoOrbitRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

