// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/telemetry_server/telemetry_server.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.telemetry_server;

@kotlin.jvm.JvmName("-initializepublishLandedStateRequest")
public inline fun publishLandedStateRequest(block: io.mavsdk.telemetry_server.PublishLandedStateRequestKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry_server.TelemetryServerProto.PublishLandedStateRequest =
  io.mavsdk.telemetry_server.PublishLandedStateRequestKt.Dsl._create(io.mavsdk.telemetry_server.TelemetryServerProto.PublishLandedStateRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `mavsdk.rpc.telemetry_server.PublishLandedStateRequest`
 */
public object PublishLandedStateRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.telemetry_server.TelemetryServerProto.PublishLandedStateRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.telemetry_server.TelemetryServerProto.PublishLandedStateRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.telemetry_server.TelemetryServerProto.PublishLandedStateRequest = _builder.build()

    /**
     * ```
     * The next 'landed' state
     * ```
     *
     * `.mavsdk.rpc.telemetry_server.LandedState landed_state = 1;`
     */
    public var landedState: io.mavsdk.telemetry_server.TelemetryServerProto.LandedState
      @JvmName("getLandedState")
      get() = _builder.getLandedState()
      @JvmName("setLandedState")
      set(value) {
        _builder.setLandedState(value)
      }
    public var landedStateValue: kotlin.Int
      @JvmName("getLandedStateValue")
      get() = _builder.getLandedStateValue()
      @JvmName("setLandedStateValue")
      set(value) {
        _builder.setLandedStateValue(value)
      }
    /**
     * ```
     * The next 'landed' state
     * ```
     *
     * `.mavsdk.rpc.telemetry_server.LandedState landed_state = 1;`
     */
    public fun clearLandedState() {
      _builder.clearLandedState()
    }
  }
}
public inline fun io.mavsdk.telemetry_server.TelemetryServerProto.PublishLandedStateRequest.copy(block: `io.mavsdk.telemetry_server`.PublishLandedStateRequestKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry_server.TelemetryServerProto.PublishLandedStateRequest =
  `io.mavsdk.telemetry_server`.PublishLandedStateRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

