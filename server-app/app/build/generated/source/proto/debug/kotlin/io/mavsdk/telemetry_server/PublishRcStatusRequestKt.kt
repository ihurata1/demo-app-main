// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/telemetry_server/telemetry_server.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.telemetry_server;

@kotlin.jvm.JvmName("-initializepublishRcStatusRequest")
public inline fun publishRcStatusRequest(block: io.mavsdk.telemetry_server.PublishRcStatusRequestKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry_server.TelemetryServerProto.PublishRcStatusRequest =
  io.mavsdk.telemetry_server.PublishRcStatusRequestKt.Dsl._create(io.mavsdk.telemetry_server.TelemetryServerProto.PublishRcStatusRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `mavsdk.rpc.telemetry_server.PublishRcStatusRequest`
 */
public object PublishRcStatusRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.telemetry_server.TelemetryServerProto.PublishRcStatusRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.telemetry_server.TelemetryServerProto.PublishRcStatusRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.telemetry_server.TelemetryServerProto.PublishRcStatusRequest = _builder.build()

    /**
     * ```
     * The next RC status
     * ```
     *
     * `.mavsdk.rpc.telemetry_server.RcStatus rc_status = 1;`
     */
    public var rcStatus: io.mavsdk.telemetry_server.TelemetryServerProto.RcStatus
      @JvmName("getRcStatus")
      get() = _builder.getRcStatus()
      @JvmName("setRcStatus")
      set(value) {
        _builder.setRcStatus(value)
      }
    /**
     * ```
     * The next RC status
     * ```
     *
     * `.mavsdk.rpc.telemetry_server.RcStatus rc_status = 1;`
     */
    public fun clearRcStatus() {
      _builder.clearRcStatus()
    }
    /**
     * ```
     * The next RC status
     * ```
     *
     * `.mavsdk.rpc.telemetry_server.RcStatus rc_status = 1;`
     * @return Whether the rcStatus field is set.
     */
    public fun hasRcStatus(): kotlin.Boolean {
      return _builder.hasRcStatus()
    }
  }
}
public inline fun io.mavsdk.telemetry_server.TelemetryServerProto.PublishRcStatusRequest.copy(block: `io.mavsdk.telemetry_server`.PublishRcStatusRequestKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry_server.TelemetryServerProto.PublishRcStatusRequest =
  `io.mavsdk.telemetry_server`.PublishRcStatusRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val io.mavsdk.telemetry_server.TelemetryServerProto.PublishRcStatusRequestOrBuilder.rcStatusOrNull: io.mavsdk.telemetry_server.TelemetryServerProto.RcStatus?
  get() = if (hasRcStatus()) getRcStatus() else null

