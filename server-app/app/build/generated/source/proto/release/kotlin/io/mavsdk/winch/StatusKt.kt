// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/winch/winch.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.winch;

@kotlin.jvm.JvmName("-initializestatus")
public inline fun status(block: io.mavsdk.winch.StatusKt.Dsl.() -> kotlin.Unit): io.mavsdk.winch.WinchProto.Status =
  io.mavsdk.winch.StatusKt.Dsl._create(io.mavsdk.winch.WinchProto.Status.newBuilder()).apply { block() }._build()
/**
 * ```
 * Status type.
 * ```
 *
 * Protobuf type `mavsdk.rpc.winch.Status`
 */
public object StatusKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.winch.WinchProto.Status.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.winch.WinchProto.Status.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.winch.WinchProto.Status = _builder.build()

    /**
     * <pre>
     * Time in usec
     * </pre>
     *
     * <code>uint64 time_usec = 1;</code>
     */
    public var timeUsec: kotlin.Long
      @JvmName("getTimeUsec")
      get() = _builder.getTimeUsec()
      @JvmName("setTimeUsec")
      set(value) {
        _builder.setTimeUsec(value)
      }
    /**
     * ```
     * Time in usec
     * ```
     *
     * `uint64 time_usec = 1;`
     */
    public fun clearTimeUsec() {
      _builder.clearTimeUsec()
    }

    /**
     * <pre>
     * Length of the line in meters
     * </pre>
     *
     * <code>float line_length_m = 2;</code>
     */
    public var lineLengthM: kotlin.Float
      @JvmName("getLineLengthM")
      get() = _builder.getLineLengthM()
      @JvmName("setLineLengthM")
      set(value) {
        _builder.setLineLengthM(value)
      }
    /**
     * ```
     * Length of the line in meters
     * ```
     *
     * `float line_length_m = 2;`
     */
    public fun clearLineLengthM() {
      _builder.clearLineLengthM()
    }

    /**
     * <pre>
     * Speed in meters per second
     * </pre>
     *
     * <code>float speed_m_s = 3;</code>
     */
    public var speedMS: kotlin.Float
      @JvmName("getSpeedMS")
      get() = _builder.getSpeedMS()
      @JvmName("setSpeedMS")
      set(value) {
        _builder.setSpeedMS(value)
      }
    /**
     * ```
     * Speed in meters per second
     * ```
     *
     * `float speed_m_s = 3;`
     */
    public fun clearSpeedMS() {
      _builder.clearSpeedMS()
    }

    /**
     * <pre>
     * Tension in kilograms
     * </pre>
     *
     * <code>float tension_kg = 4;</code>
     */
    public var tensionKg: kotlin.Float
      @JvmName("getTensionKg")
      get() = _builder.getTensionKg()
      @JvmName("setTensionKg")
      set(value) {
        _builder.setTensionKg(value)
      }
    /**
     * ```
     * Tension in kilograms
     * ```
     *
     * `float tension_kg = 4;`
     */
    public fun clearTensionKg() {
      _builder.clearTensionKg()
    }

    /**
     * <pre>
     * Voltage in volts
     * </pre>
     *
     * <code>float voltage_v = 5;</code>
     */
    public var voltageV: kotlin.Float
      @JvmName("getVoltageV")
      get() = _builder.getVoltageV()
      @JvmName("setVoltageV")
      set(value) {
        _builder.setVoltageV(value)
      }
    /**
     * ```
     * Voltage in volts
     * ```
     *
     * `float voltage_v = 5;`
     */
    public fun clearVoltageV() {
      _builder.clearVoltageV()
    }

    /**
     * <pre>
     * Current in amperes
     * </pre>
     *
     * <code>float current_a = 6;</code>
     */
    public var currentA: kotlin.Float
      @JvmName("getCurrentA")
      get() = _builder.getCurrentA()
      @JvmName("setCurrentA")
      set(value) {
        _builder.setCurrentA(value)
      }
    /**
     * ```
     * Current in amperes
     * ```
     *
     * `float current_a = 6;`
     */
    public fun clearCurrentA() {
      _builder.clearCurrentA()
    }

    /**
     * <pre>
     * Temperature in Celsius
     * </pre>
     *
     * <code>int32 temperature_c = 7;</code>
     */
    public var temperatureC: kotlin.Int
      @JvmName("getTemperatureC")
      get() = _builder.getTemperatureC()
      @JvmName("setTemperatureC")
      set(value) {
        _builder.setTemperatureC(value)
      }
    /**
     * ```
     * Temperature in Celsius
     * ```
     *
     * `int32 temperature_c = 7;`
     */
    public fun clearTemperatureC() {
      _builder.clearTemperatureC()
    }

    /**
     * ```
     * Status flags
     * ```
     *
     * `.mavsdk.rpc.winch.StatusFlags status_flags = 8;`
     */
    public var statusFlags: io.mavsdk.winch.WinchProto.StatusFlags
      @JvmName("getStatusFlags")
      get() = _builder.getStatusFlags()
      @JvmName("setStatusFlags")
      set(value) {
        _builder.setStatusFlags(value)
      }
    /**
     * ```
     * Status flags
     * ```
     *
     * `.mavsdk.rpc.winch.StatusFlags status_flags = 8;`
     */
    public fun clearStatusFlags() {
      _builder.clearStatusFlags()
    }
    /**
     * ```
     * Status flags
     * ```
     *
     * `.mavsdk.rpc.winch.StatusFlags status_flags = 8;`
     * @return Whether the statusFlags field is set.
     */
    public fun hasStatusFlags(): kotlin.Boolean {
      return _builder.hasStatusFlags()
    }
  }
}
public inline fun io.mavsdk.winch.WinchProto.Status.copy(block: `io.mavsdk.winch`.StatusKt.Dsl.() -> kotlin.Unit): io.mavsdk.winch.WinchProto.Status =
  `io.mavsdk.winch`.StatusKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val io.mavsdk.winch.WinchProto.StatusOrBuilder.statusFlagsOrNull: io.mavsdk.winch.WinchProto.StatusFlags?
  get() = if (hasStatusFlags()) getStatusFlags() else null

