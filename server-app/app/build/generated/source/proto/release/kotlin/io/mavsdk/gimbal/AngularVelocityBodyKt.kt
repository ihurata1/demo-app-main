// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/gimbal/gimbal.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.gimbal;

@kotlin.jvm.JvmName("-initializeangularVelocityBody")
public inline fun angularVelocityBody(block: io.mavsdk.gimbal.AngularVelocityBodyKt.Dsl.() -> kotlin.Unit): io.mavsdk.gimbal.GimbalProto.AngularVelocityBody =
  io.mavsdk.gimbal.AngularVelocityBodyKt.Dsl._create(io.mavsdk.gimbal.GimbalProto.AngularVelocityBody.newBuilder()).apply { block() }._build()
/**
 * ```
 * Gimbal angular rate type
 * ```
 *
 * Protobuf type `mavsdk.rpc.gimbal.AngularVelocityBody`
 */
public object AngularVelocityBodyKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.gimbal.GimbalProto.AngularVelocityBody.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.gimbal.GimbalProto.AngularVelocityBody.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.gimbal.GimbalProto.AngularVelocityBody = _builder.build()

    /**
     * <pre>
     * Roll angular velocity
     * </pre>
     *
     * <code>float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var rollRadS: kotlin.Float
      @JvmName("getRollRadS")
      get() = _builder.getRollRadS()
      @JvmName("setRollRadS")
      set(value) {
        _builder.setRollRadS(value)
      }
    /**
     * ```
     * Roll angular velocity
     * ```
     *
     * `float roll_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearRollRadS() {
      _builder.clearRollRadS()
    }

    /**
     * <pre>
     * Pitch angular velocity
     * </pre>
     *
     * <code>float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var pitchRadS: kotlin.Float
      @JvmName("getPitchRadS")
      get() = _builder.getPitchRadS()
      @JvmName("setPitchRadS")
      set(value) {
        _builder.setPitchRadS(value)
      }
    /**
     * ```
     * Pitch angular velocity
     * ```
     *
     * `float pitch_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearPitchRadS() {
      _builder.clearPitchRadS()
    }

    /**
     * <pre>
     * Yaw angular velocity
     * </pre>
     *
     * <code>float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var yawRadS: kotlin.Float
      @JvmName("getYawRadS")
      get() = _builder.getYawRadS()
      @JvmName("setYawRadS")
      set(value) {
        _builder.setYawRadS(value)
      }
    /**
     * ```
     * Yaw angular velocity
     * ```
     *
     * `float yaw_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearYawRadS() {
      _builder.clearYawRadS()
    }
  }
}
public inline fun io.mavsdk.gimbal.GimbalProto.AngularVelocityBody.copy(block: `io.mavsdk.gimbal`.AngularVelocityBodyKt.Dsl.() -> kotlin.Unit): io.mavsdk.gimbal.GimbalProto.AngularVelocityBody =
  `io.mavsdk.gimbal`.AngularVelocityBodyKt.Dsl._create(this.toBuilder()).apply { block() }._build()

