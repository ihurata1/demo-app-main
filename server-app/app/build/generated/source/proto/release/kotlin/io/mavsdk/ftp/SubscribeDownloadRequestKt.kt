// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/ftp/ftp.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.ftp;

@kotlin.jvm.JvmName("-initializesubscribeDownloadRequest")
public inline fun subscribeDownloadRequest(block: io.mavsdk.ftp.SubscribeDownloadRequestKt.Dsl.() -> kotlin.Unit): io.mavsdk.ftp.FtpProto.SubscribeDownloadRequest =
  io.mavsdk.ftp.SubscribeDownloadRequestKt.Dsl._create(io.mavsdk.ftp.FtpProto.SubscribeDownloadRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `mavsdk.rpc.ftp.SubscribeDownloadRequest`
 */
public object SubscribeDownloadRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.ftp.FtpProto.SubscribeDownloadRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.ftp.FtpProto.SubscribeDownloadRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.ftp.FtpProto.SubscribeDownloadRequest = _builder.build()

    /**
     * ```
     * The path of the remote file to download.
     * ```
     *
     * `string remote_file_path = 1;`
     */
    public var remoteFilePath: kotlin.String
      @JvmName("getRemoteFilePath")
      get() = _builder.getRemoteFilePath()
      @JvmName("setRemoteFilePath")
      set(value) {
        _builder.setRemoteFilePath(value)
      }
    /**
     * ```
     * The path of the remote file to download.
     * ```
     *
     * `string remote_file_path = 1;`
     */
    public fun clearRemoteFilePath() {
      _builder.clearRemoteFilePath()
    }

    /**
     * ```
     * The local directory to download to.
     * ```
     *
     * `string local_dir = 2;`
     */
    public var localDir: kotlin.String
      @JvmName("getLocalDir")
      get() = _builder.getLocalDir()
      @JvmName("setLocalDir")
      set(value) {
        _builder.setLocalDir(value)
      }
    /**
     * ```
     * The local directory to download to.
     * ```
     *
     * `string local_dir = 2;`
     */
    public fun clearLocalDir() {
      _builder.clearLocalDir()
    }

    /**
     * <pre>
     * Use burst for faster downloading.
     * </pre>
     *
     * <code>bool use_burst = 3;</code>
     */
    public var useBurst: kotlin.Boolean
      @JvmName("getUseBurst")
      get() = _builder.getUseBurst()
      @JvmName("setUseBurst")
      set(value) {
        _builder.setUseBurst(value)
      }
    /**
     * ```
     * Use burst for faster downloading.
     * ```
     *
     * `bool use_burst = 3;`
     */
    public fun clearUseBurst() {
      _builder.clearUseBurst()
    }
  }
}
public inline fun io.mavsdk.ftp.FtpProto.SubscribeDownloadRequest.copy(block: `io.mavsdk.ftp`.SubscribeDownloadRequestKt.Dsl.() -> kotlin.Unit): io.mavsdk.ftp.FtpProto.SubscribeDownloadRequest =
  `io.mavsdk.ftp`.SubscribeDownloadRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

