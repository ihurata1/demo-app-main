// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/geofence/geofence.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.geofence;

@kotlin.jvm.JvmName("-initializecircle")
public inline fun circle(block: io.mavsdk.geofence.CircleKt.Dsl.() -> kotlin.Unit): io.mavsdk.geofence.GeofenceProto.Circle =
  io.mavsdk.geofence.CircleKt.Dsl._create(io.mavsdk.geofence.GeofenceProto.Circle.newBuilder()).apply { block() }._build()
/**
 * ```
 * Circular type.
 * ```
 *
 * Protobuf type `mavsdk.rpc.geofence.Circle`
 */
public object CircleKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.geofence.GeofenceProto.Circle.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.geofence.GeofenceProto.Circle.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.geofence.GeofenceProto.Circle = _builder.build()

    /**
     * ```
     * Point defining the center
     * ```
     *
     * `.mavsdk.rpc.geofence.Point point = 1;`
     */
    public var point: io.mavsdk.geofence.GeofenceProto.Point
      @JvmName("getPoint")
      get() = _builder.getPoint()
      @JvmName("setPoint")
      set(value) {
        _builder.setPoint(value)
      }
    /**
     * ```
     * Point defining the center
     * ```
     *
     * `.mavsdk.rpc.geofence.Point point = 1;`
     */
    public fun clearPoint() {
      _builder.clearPoint()
    }
    /**
     * ```
     * Point defining the center
     * ```
     *
     * `.mavsdk.rpc.geofence.Point point = 1;`
     * @return Whether the point field is set.
     */
    public fun hasPoint(): kotlin.Boolean {
      return _builder.hasPoint()
    }

    /**
     * <pre>
     * Radius of the circular fence
     * </pre>
     *
     * <code>float radius = 2 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var radius: kotlin.Float
      @JvmName("getRadius")
      get() = _builder.getRadius()
      @JvmName("setRadius")
      set(value) {
        _builder.setRadius(value)
      }
    /**
     * ```
     * Radius of the circular fence
     * ```
     *
     * `float radius = 2 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearRadius() {
      _builder.clearRadius()
    }

    /**
     * ```
     * Fence type
     * ```
     *
     * `.mavsdk.rpc.geofence.FenceType fence_type = 3;`
     */
    public var fenceType: io.mavsdk.geofence.GeofenceProto.FenceType
      @JvmName("getFenceType")
      get() = _builder.getFenceType()
      @JvmName("setFenceType")
      set(value) {
        _builder.setFenceType(value)
      }
    public var fenceTypeValue: kotlin.Int
      @JvmName("getFenceTypeValue")
      get() = _builder.getFenceTypeValue()
      @JvmName("setFenceTypeValue")
      set(value) {
        _builder.setFenceTypeValue(value)
      }
    /**
     * ```
     * Fence type
     * ```
     *
     * `.mavsdk.rpc.geofence.FenceType fence_type = 3;`
     */
    public fun clearFenceType() {
      _builder.clearFenceType()
    }
  }
}
public inline fun io.mavsdk.geofence.GeofenceProto.Circle.copy(block: `io.mavsdk.geofence`.CircleKt.Dsl.() -> kotlin.Unit): io.mavsdk.geofence.GeofenceProto.Circle =
  `io.mavsdk.geofence`.CircleKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val io.mavsdk.geofence.GeofenceProto.CircleOrBuilder.pointOrNull: io.mavsdk.geofence.GeofenceProto.Point?
  get() = if (hasPoint()) getPoint() else null

