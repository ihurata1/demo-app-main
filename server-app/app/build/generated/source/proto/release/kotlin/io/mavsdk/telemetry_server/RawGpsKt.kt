// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/telemetry_server/telemetry_server.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.telemetry_server;

@kotlin.jvm.JvmName("-initializerawGps")
public inline fun rawGps(block: io.mavsdk.telemetry_server.RawGpsKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry_server.TelemetryServerProto.RawGps =
  io.mavsdk.telemetry_server.RawGpsKt.Dsl._create(io.mavsdk.telemetry_server.TelemetryServerProto.RawGps.newBuilder()).apply { block() }._build()
/**
 * ```
 *
 * Raw GPS information type.
 *
 * Warning: this is an advanced type! If you want the location of the drone, use
 * the position instead. This message exposes the raw values of the GNSS sensor.
 * ```
 *
 * Protobuf type `mavsdk.rpc.telemetry_server.RawGps`
 */
public object RawGpsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.telemetry_server.TelemetryServerProto.RawGps.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.telemetry_server.TelemetryServerProto.RawGps.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.telemetry_server.TelemetryServerProto.RawGps = _builder.build()

    /**
     * <pre>
     * Timestamp in microseconds (UNIX Epoch time or time since system boot, to be inferred)
     * </pre>
     *
     * <code>uint64 timestamp_us = 1;</code>
     */
    public var timestampUs: kotlin.Long
      @JvmName("getTimestampUs")
      get() = _builder.getTimestampUs()
      @JvmName("setTimestampUs")
      set(value) {
        _builder.setTimestampUs(value)
      }
    /**
     * ```
     * Timestamp in microseconds (UNIX Epoch time or time since system boot, to be inferred)
     * ```
     *
     * `uint64 timestamp_us = 1;`
     */
    public fun clearTimestampUs() {
      _builder.clearTimestampUs()
    }

    /**
     * <pre>
     * Latitude in degrees (WGS84, EGM96 ellipsoid)
     * </pre>
     *
     * <code>double latitude_deg = 2;</code>
     */
    public var latitudeDeg: kotlin.Double
      @JvmName("getLatitudeDeg")
      get() = _builder.getLatitudeDeg()
      @JvmName("setLatitudeDeg")
      set(value) {
        _builder.setLatitudeDeg(value)
      }
    /**
     * ```
     * Latitude in degrees (WGS84, EGM96 ellipsoid)
     * ```
     *
     * `double latitude_deg = 2;`
     */
    public fun clearLatitudeDeg() {
      _builder.clearLatitudeDeg()
    }

    /**
     * <pre>
     * Longitude in degrees (WGS84, EGM96 ellipsoid)
     * </pre>
     *
     * <code>double longitude_deg = 3;</code>
     */
    public var longitudeDeg: kotlin.Double
      @JvmName("getLongitudeDeg")
      get() = _builder.getLongitudeDeg()
      @JvmName("setLongitudeDeg")
      set(value) {
        _builder.setLongitudeDeg(value)
      }
    /**
     * ```
     * Longitude in degrees (WGS84, EGM96 ellipsoid)
     * ```
     *
     * `double longitude_deg = 3;`
     */
    public fun clearLongitudeDeg() {
      _builder.clearLongitudeDeg()
    }

    /**
     * <pre>
     * Altitude AMSL (above mean sea level) in metres
     * </pre>
     *
     * <code>float absolute_altitude_m = 4;</code>
     */
    public var absoluteAltitudeM: kotlin.Float
      @JvmName("getAbsoluteAltitudeM")
      get() = _builder.getAbsoluteAltitudeM()
      @JvmName("setAbsoluteAltitudeM")
      set(value) {
        _builder.setAbsoluteAltitudeM(value)
      }
    /**
     * ```
     * Altitude AMSL (above mean sea level) in metres
     * ```
     *
     * `float absolute_altitude_m = 4;`
     */
    public fun clearAbsoluteAltitudeM() {
      _builder.clearAbsoluteAltitudeM()
    }

    /**
     * <pre>
     * GPS HDOP horizontal dilution of position (unitless). If unknown, set to NaN
     * </pre>
     *
     * <code>float hdop = 5;</code>
     */
    public var hdop: kotlin.Float
      @JvmName("getHdop")
      get() = _builder.getHdop()
      @JvmName("setHdop")
      set(value) {
        _builder.setHdop(value)
      }
    /**
     * ```
     * GPS HDOP horizontal dilution of position (unitless). If unknown, set to NaN
     * ```
     *
     * `float hdop = 5;`
     */
    public fun clearHdop() {
      _builder.clearHdop()
    }

    /**
     * <pre>
     * GPS VDOP vertical dilution of position (unitless). If unknown, set to NaN
     * </pre>
     *
     * <code>float vdop = 6;</code>
     */
    public var vdop: kotlin.Float
      @JvmName("getVdop")
      get() = _builder.getVdop()
      @JvmName("setVdop")
      set(value) {
        _builder.setVdop(value)
      }
    /**
     * ```
     * GPS VDOP vertical dilution of position (unitless). If unknown, set to NaN
     * ```
     *
     * `float vdop = 6;`
     */
    public fun clearVdop() {
      _builder.clearVdop()
    }

    /**
     * <pre>
     * Ground velocity in metres per second
     * </pre>
     *
     * <code>float velocity_m_s = 7;</code>
     */
    public var velocityMS: kotlin.Float
      @JvmName("getVelocityMS")
      get() = _builder.getVelocityMS()
      @JvmName("setVelocityMS")
      set(value) {
        _builder.setVelocityMS(value)
      }
    /**
     * ```
     * Ground velocity in metres per second
     * ```
     *
     * `float velocity_m_s = 7;`
     */
    public fun clearVelocityMS() {
      _builder.clearVelocityMS()
    }

    /**
     * <pre>
     * Course over ground (NOT heading, but direction of movement) in degrees. If unknown, set to NaN
     * </pre>
     *
     * <code>float cog_deg = 8;</code>
     */
    public var cogDeg: kotlin.Float
      @JvmName("getCogDeg")
      get() = _builder.getCogDeg()
      @JvmName("setCogDeg")
      set(value) {
        _builder.setCogDeg(value)
      }
    /**
     * ```
     * Course over ground (NOT heading, but direction of movement) in degrees. If unknown, set to NaN
     * ```
     *
     * `float cog_deg = 8;`
     */
    public fun clearCogDeg() {
      _builder.clearCogDeg()
    }

    /**
     * <pre>
     * Altitude in metres (above WGS84, EGM96 ellipsoid)
     * </pre>
     *
     * <code>float altitude_ellipsoid_m = 9;</code>
     */
    public var altitudeEllipsoidM: kotlin.Float
      @JvmName("getAltitudeEllipsoidM")
      get() = _builder.getAltitudeEllipsoidM()
      @JvmName("setAltitudeEllipsoidM")
      set(value) {
        _builder.setAltitudeEllipsoidM(value)
      }
    /**
     * ```
     * Altitude in metres (above WGS84, EGM96 ellipsoid)
     * ```
     *
     * `float altitude_ellipsoid_m = 9;`
     */
    public fun clearAltitudeEllipsoidM() {
      _builder.clearAltitudeEllipsoidM()
    }

    /**
     * <pre>
     * Position uncertainty in metres
     * </pre>
     *
     * <code>float horizontal_uncertainty_m = 10;</code>
     */
    public var horizontalUncertaintyM: kotlin.Float
      @JvmName("getHorizontalUncertaintyM")
      get() = _builder.getHorizontalUncertaintyM()
      @JvmName("setHorizontalUncertaintyM")
      set(value) {
        _builder.setHorizontalUncertaintyM(value)
      }
    /**
     * ```
     * Position uncertainty in metres
     * ```
     *
     * `float horizontal_uncertainty_m = 10;`
     */
    public fun clearHorizontalUncertaintyM() {
      _builder.clearHorizontalUncertaintyM()
    }

    /**
     * <pre>
     * Altitude uncertainty in metres
     * </pre>
     *
     * <code>float vertical_uncertainty_m = 11;</code>
     */
    public var verticalUncertaintyM: kotlin.Float
      @JvmName("getVerticalUncertaintyM")
      get() = _builder.getVerticalUncertaintyM()
      @JvmName("setVerticalUncertaintyM")
      set(value) {
        _builder.setVerticalUncertaintyM(value)
      }
    /**
     * ```
     * Altitude uncertainty in metres
     * ```
     *
     * `float vertical_uncertainty_m = 11;`
     */
    public fun clearVerticalUncertaintyM() {
      _builder.clearVerticalUncertaintyM()
    }

    /**
     * <pre>
     * Velocity uncertainty in metres per second
     * </pre>
     *
     * <code>float velocity_uncertainty_m_s = 12;</code>
     */
    public var velocityUncertaintyMS: kotlin.Float
      @JvmName("getVelocityUncertaintyMS")
      get() = _builder.getVelocityUncertaintyMS()
      @JvmName("setVelocityUncertaintyMS")
      set(value) {
        _builder.setVelocityUncertaintyMS(value)
      }
    /**
     * ```
     * Velocity uncertainty in metres per second
     * ```
     *
     * `float velocity_uncertainty_m_s = 12;`
     */
    public fun clearVelocityUncertaintyMS() {
      _builder.clearVelocityUncertaintyMS()
    }

    /**
     * <pre>
     * Heading uncertainty in degrees
     * </pre>
     *
     * <code>float heading_uncertainty_deg = 13;</code>
     */
    public var headingUncertaintyDeg: kotlin.Float
      @JvmName("getHeadingUncertaintyDeg")
      get() = _builder.getHeadingUncertaintyDeg()
      @JvmName("setHeadingUncertaintyDeg")
      set(value) {
        _builder.setHeadingUncertaintyDeg(value)
      }
    /**
     * ```
     * Heading uncertainty in degrees
     * ```
     *
     * `float heading_uncertainty_deg = 13;`
     */
    public fun clearHeadingUncertaintyDeg() {
      _builder.clearHeadingUncertaintyDeg()
    }

    /**
     * <pre>
     * Yaw in earth frame from north.
     * </pre>
     *
     * <code>float yaw_deg = 14;</code>
     */
    public var yawDeg: kotlin.Float
      @JvmName("getYawDeg")
      get() = _builder.getYawDeg()
      @JvmName("setYawDeg")
      set(value) {
        _builder.setYawDeg(value)
      }
    /**
     * ```
     * Yaw in earth frame from north.
     * ```
     *
     * `float yaw_deg = 14;`
     */
    public fun clearYawDeg() {
      _builder.clearYawDeg()
    }
  }
}
public inline fun io.mavsdk.telemetry_server.TelemetryServerProto.RawGps.copy(block: `io.mavsdk.telemetry_server`.RawGpsKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry_server.TelemetryServerProto.RawGps =
  `io.mavsdk.telemetry_server`.RawGpsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

