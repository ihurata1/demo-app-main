// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/mocap/mocap.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.mocap;

@kotlin.jvm.JvmName("-initializequaternion")
public inline fun quaternion(block: io.mavsdk.mocap.QuaternionKt.Dsl.() -> kotlin.Unit): io.mavsdk.mocap.MocapProto.Quaternion =
  io.mavsdk.mocap.QuaternionKt.Dsl._create(io.mavsdk.mocap.MocapProto.Quaternion.newBuilder()).apply { block() }._build()
/**
 * ```
 *
 * Quaternion type.
 *
 * All rotations and axis systems follow the right-hand rule.
 * The Hamilton quaternion product definition is used.
 * A zero-rotation quaternion is represented by (1,0,0,0).
 * The quaternion could also be written as w + xi + yj + zk.
 *
 * For more info see: https://en.wikipedia.org/wiki/Quaternion
 * ```
 *
 * Protobuf type `mavsdk.rpc.mocap.Quaternion`
 */
public object QuaternionKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.mocap.MocapProto.Quaternion.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.mocap.MocapProto.Quaternion.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.mocap.MocapProto.Quaternion = _builder.build()

    /**
     * <pre>
     * Quaternion entry 0, also denoted as a
     * </pre>
     *
     * <code>float w = 1;</code>
     */
    public var w: kotlin.Float
      @JvmName("getW")
      get() = _builder.getW()
      @JvmName("setW")
      set(value) {
        _builder.setW(value)
      }
    /**
     * ```
     * Quaternion entry 0, also denoted as a
     * ```
     *
     * `float w = 1;`
     */
    public fun clearW() {
      _builder.clearW()
    }

    /**
     * <pre>
     * Quaternion entry 1, also denoted as b
     * </pre>
     *
     * <code>float x = 2;</code>
     */
    public var x: kotlin.Float
      @JvmName("getX")
      get() = _builder.getX()
      @JvmName("setX")
      set(value) {
        _builder.setX(value)
      }
    /**
     * ```
     * Quaternion entry 1, also denoted as b
     * ```
     *
     * `float x = 2;`
     */
    public fun clearX() {
      _builder.clearX()
    }

    /**
     * <pre>
     * Quaternion entry 2, also denoted as c
     * </pre>
     *
     * <code>float y = 3;</code>
     */
    public var y: kotlin.Float
      @JvmName("getY")
      get() = _builder.getY()
      @JvmName("setY")
      set(value) {
        _builder.setY(value)
      }
    /**
     * ```
     * Quaternion entry 2, also denoted as c
     * ```
     *
     * `float y = 3;`
     */
    public fun clearY() {
      _builder.clearY()
    }

    /**
     * <pre>
     * Quaternion entry 3, also denoted as d
     * </pre>
     *
     * <code>float z = 4;</code>
     */
    public var z: kotlin.Float
      @JvmName("getZ")
      get() = _builder.getZ()
      @JvmName("setZ")
      set(value) {
        _builder.setZ(value)
      }
    /**
     * ```
     * Quaternion entry 3, also denoted as d
     * ```
     *
     * `float z = 4;`
     */
    public fun clearZ() {
      _builder.clearZ()
    }
  }
}
public inline fun io.mavsdk.mocap.MocapProto.Quaternion.copy(block: `io.mavsdk.mocap`.QuaternionKt.Dsl.() -> kotlin.Unit): io.mavsdk.mocap.MocapProto.Quaternion =
  `io.mavsdk.mocap`.QuaternionKt.Dsl._create(this.toBuilder()).apply { block() }._build()

