// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/mocap/mocap.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.mocap;

@kotlin.jvm.JvmName("-initializeattitudePositionMocap")
public inline fun attitudePositionMocap(block: io.mavsdk.mocap.AttitudePositionMocapKt.Dsl.() -> kotlin.Unit): io.mavsdk.mocap.MocapProto.AttitudePositionMocap =
  io.mavsdk.mocap.AttitudePositionMocapKt.Dsl._create(io.mavsdk.mocap.MocapProto.AttitudePositionMocap.newBuilder()).apply { block() }._build()
/**
 * ```
 * Motion capture attitude and position
 * ```
 *
 * Protobuf type `mavsdk.rpc.mocap.AttitudePositionMocap`
 */
public object AttitudePositionMocapKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.mocap.MocapProto.AttitudePositionMocap.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.mocap.MocapProto.AttitudePositionMocap.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.mocap.MocapProto.AttitudePositionMocap = _builder.build()

    /**
     * <pre>
     * PositionBody frame timestamp UNIX Epoch time (0 to use Backend timestamp)
     * </pre>
     *
     * <code>uint64 time_usec = 1;</code>
     */
    public var timeUsec: kotlin.Long
      @JvmName("getTimeUsec")
      get() = _builder.getTimeUsec()
      @JvmName("setTimeUsec")
      set(value) {
        _builder.setTimeUsec(value)
      }
    /**
     * ```
     * PositionBody frame timestamp UNIX Epoch time (0 to use Backend timestamp)
     * ```
     *
     * `uint64 time_usec = 1;`
     */
    public fun clearTimeUsec() {
      _builder.clearTimeUsec()
    }

    /**
     * ```
     * Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
     * ```
     *
     * `.mavsdk.rpc.mocap.Quaternion q = 2;`
     */
    public var q: io.mavsdk.mocap.MocapProto.Quaternion
      @JvmName("getQ")
      get() = _builder.getQ()
      @JvmName("setQ")
      set(value) {
        _builder.setQ(value)
      }
    /**
     * ```
     * Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
     * ```
     *
     * `.mavsdk.rpc.mocap.Quaternion q = 2;`
     */
    public fun clearQ() {
      _builder.clearQ()
    }
    /**
     * ```
     * Attitude quaternion (w, x, y, z order, zero-rotation is 1, 0, 0, 0)
     * ```
     *
     * `.mavsdk.rpc.mocap.Quaternion q = 2;`
     * @return Whether the q field is set.
     */
    public fun hasQ(): kotlin.Boolean {
      return _builder.hasQ()
    }

    /**
     * ```
     * Body Position (NED)
     * ```
     *
     * `.mavsdk.rpc.mocap.PositionBody position_body = 3;`
     */
    public var positionBody: io.mavsdk.mocap.MocapProto.PositionBody
      @JvmName("getPositionBody")
      get() = _builder.getPositionBody()
      @JvmName("setPositionBody")
      set(value) {
        _builder.setPositionBody(value)
      }
    /**
     * ```
     * Body Position (NED)
     * ```
     *
     * `.mavsdk.rpc.mocap.PositionBody position_body = 3;`
     */
    public fun clearPositionBody() {
      _builder.clearPositionBody()
    }
    /**
     * ```
     * Body Position (NED)
     * ```
     *
     * `.mavsdk.rpc.mocap.PositionBody position_body = 3;`
     * @return Whether the positionBody field is set.
     */
    public fun hasPositionBody(): kotlin.Boolean {
      return _builder.hasPositionBody()
    }

    /**
     * ```
     * Pose cross-covariance matrix.
     * ```
     *
     * `.mavsdk.rpc.mocap.Covariance pose_covariance = 4;`
     */
    public var poseCovariance: io.mavsdk.mocap.MocapProto.Covariance
      @JvmName("getPoseCovariance")
      get() = _builder.getPoseCovariance()
      @JvmName("setPoseCovariance")
      set(value) {
        _builder.setPoseCovariance(value)
      }
    /**
     * ```
     * Pose cross-covariance matrix.
     * ```
     *
     * `.mavsdk.rpc.mocap.Covariance pose_covariance = 4;`
     */
    public fun clearPoseCovariance() {
      _builder.clearPoseCovariance()
    }
    /**
     * ```
     * Pose cross-covariance matrix.
     * ```
     *
     * `.mavsdk.rpc.mocap.Covariance pose_covariance = 4;`
     * @return Whether the poseCovariance field is set.
     */
    public fun hasPoseCovariance(): kotlin.Boolean {
      return _builder.hasPoseCovariance()
    }
  }
}
public inline fun io.mavsdk.mocap.MocapProto.AttitudePositionMocap.copy(block: `io.mavsdk.mocap`.AttitudePositionMocapKt.Dsl.() -> kotlin.Unit): io.mavsdk.mocap.MocapProto.AttitudePositionMocap =
  `io.mavsdk.mocap`.AttitudePositionMocapKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val io.mavsdk.mocap.MocapProto.AttitudePositionMocapOrBuilder.qOrNull: io.mavsdk.mocap.MocapProto.Quaternion?
  get() = if (hasQ()) getQ() else null

public val io.mavsdk.mocap.MocapProto.AttitudePositionMocapOrBuilder.positionBodyOrNull: io.mavsdk.mocap.MocapProto.PositionBody?
  get() = if (hasPositionBody()) getPositionBody() else null

public val io.mavsdk.mocap.MocapProto.AttitudePositionMocapOrBuilder.poseCovarianceOrNull: io.mavsdk.mocap.MocapProto.Covariance?
  get() = if (hasPoseCovariance()) getPoseCovariance() else null

