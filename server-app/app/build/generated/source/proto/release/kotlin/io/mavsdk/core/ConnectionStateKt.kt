// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/core/core.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.core;

@kotlin.jvm.JvmName("-initializeconnectionState")
public inline fun connectionState(block: io.mavsdk.core.ConnectionStateKt.Dsl.() -> kotlin.Unit): io.mavsdk.core.CoreProto.ConnectionState =
  io.mavsdk.core.ConnectionStateKt.Dsl._create(io.mavsdk.core.CoreProto.ConnectionState.newBuilder()).apply { block() }._build()
/**
 * ```
 * Connection state type.
 * ```
 *
 * Protobuf type `mavsdk.rpc.core.ConnectionState`
 */
public object ConnectionStateKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.core.CoreProto.ConnectionState.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.core.CoreProto.ConnectionState.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.core.CoreProto.ConnectionState = _builder.build()

    /**
     * <pre>
     * Whether the vehicle got connected or disconnected
     * </pre>
     *
     * <code>bool is_connected = 2;</code>
     */
    public var isConnected: kotlin.Boolean
      @JvmName("getIsConnected")
      get() = _builder.getIsConnected()
      @JvmName("setIsConnected")
      set(value) {
        _builder.setIsConnected(value)
      }
    /**
     * ```
     * Whether the vehicle got connected or disconnected
     * ```
     *
     * `bool is_connected = 2;`
     */
    public fun clearIsConnected() {
      _builder.clearIsConnected()
    }
  }
}
public inline fun io.mavsdk.core.CoreProto.ConnectionState.copy(block: `io.mavsdk.core`.ConnectionStateKt.Dsl.() -> kotlin.Unit): io.mavsdk.core.CoreProto.ConnectionState =
  `io.mavsdk.core`.ConnectionStateKt.Dsl._create(this.toBuilder()).apply { block() }._build()

