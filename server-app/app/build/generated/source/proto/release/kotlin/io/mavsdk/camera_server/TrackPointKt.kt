// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/camera_server/camera_server.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.camera_server;

@kotlin.jvm.JvmName("-initializetrackPoint")
public inline fun trackPoint(block: io.mavsdk.camera_server.TrackPointKt.Dsl.() -> kotlin.Unit): io.mavsdk.camera_server.CameraServerProto.TrackPoint =
  io.mavsdk.camera_server.TrackPointKt.Dsl._create(io.mavsdk.camera_server.CameraServerProto.TrackPoint.newBuilder()).apply { block() }._build()
/**
 * ```
 * Point description type
 * ```
 *
 * Protobuf type `mavsdk.rpc.camera_server.TrackPoint`
 */
public object TrackPointKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.camera_server.CameraServerProto.TrackPoint.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.camera_server.CameraServerProto.TrackPoint.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.camera_server.CameraServerProto.TrackPoint = _builder.build()

    /**
     * <pre>
     * Point to track x value (normalized 0..1, 0 is left, 1 is right).
     * </pre>
     *
     * <code>float point_x = 1;</code>
     */
    public var pointX: kotlin.Float
      @JvmName("getPointX")
      get() = _builder.getPointX()
      @JvmName("setPointX")
      set(value) {
        _builder.setPointX(value)
      }
    /**
     * ```
     * Point to track x value (normalized 0..1, 0 is left, 1 is right).
     * ```
     *
     * `float point_x = 1;`
     */
    public fun clearPointX() {
      _builder.clearPointX()
    }

    /**
     * <pre>
     * Point to track y value (normalized 0..1, 0 is top, 1 is bottom).
     * </pre>
     *
     * <code>float point_y = 2;</code>
     */
    public var pointY: kotlin.Float
      @JvmName("getPointY")
      get() = _builder.getPointY()
      @JvmName("setPointY")
      set(value) {
        _builder.setPointY(value)
      }
    /**
     * ```
     * Point to track y value (normalized 0..1, 0 is top, 1 is bottom).
     * ```
     *
     * `float point_y = 2;`
     */
    public fun clearPointY() {
      _builder.clearPointY()
    }

    /**
     * <pre>
     * Point to track y value (normalized 0..1, 0 is top, 1 is bottom).
     * </pre>
     *
     * <code>float radius = 3;</code>
     */
    public var radius: kotlin.Float
      @JvmName("getRadius")
      get() = _builder.getRadius()
      @JvmName("setRadius")
      set(value) {
        _builder.setRadius(value)
      }
    /**
     * ```
     * Point to track y value (normalized 0..1, 0 is top, 1 is bottom).
     * ```
     *
     * `float radius = 3;`
     */
    public fun clearRadius() {
      _builder.clearRadius()
    }
  }
}
public inline fun io.mavsdk.camera_server.CameraServerProto.TrackPoint.copy(block: `io.mavsdk.camera_server`.TrackPointKt.Dsl.() -> kotlin.Unit): io.mavsdk.camera_server.CameraServerProto.TrackPoint =
  `io.mavsdk.camera_server`.TrackPointKt.Dsl._create(this.toBuilder()).apply { block() }._build()

