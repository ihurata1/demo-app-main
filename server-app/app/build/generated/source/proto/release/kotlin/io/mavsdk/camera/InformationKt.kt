// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/camera/camera.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.camera;

@kotlin.jvm.JvmName("-initializeinformation")
public inline fun information(block: io.mavsdk.camera.InformationKt.Dsl.() -> kotlin.Unit): io.mavsdk.camera.CameraProto.Information =
  io.mavsdk.camera.InformationKt.Dsl._create(io.mavsdk.camera.CameraProto.Information.newBuilder()).apply { block() }._build()
/**
 * ```
 * Type to represent a camera information.
 * ```
 *
 * Protobuf type `mavsdk.rpc.camera.Information`
 */
public object InformationKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.camera.CameraProto.Information.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.camera.CameraProto.Information.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.camera.CameraProto.Information = _builder.build()

    /**
     * ```
     * Name of the camera vendor
     * ```
     *
     * `string vendor_name = 1;`
     */
    public var vendorName: kotlin.String
      @JvmName("getVendorName")
      get() = _builder.getVendorName()
      @JvmName("setVendorName")
      set(value) {
        _builder.setVendorName(value)
      }
    /**
     * ```
     * Name of the camera vendor
     * ```
     *
     * `string vendor_name = 1;`
     */
    public fun clearVendorName() {
      _builder.clearVendorName()
    }

    /**
     * ```
     * Name of the camera model
     * ```
     *
     * `string model_name = 2;`
     */
    public var modelName: kotlin.String
      @JvmName("getModelName")
      get() = _builder.getModelName()
      @JvmName("setModelName")
      set(value) {
        _builder.setModelName(value)
      }
    /**
     * ```
     * Name of the camera model
     * ```
     *
     * `string model_name = 2;`
     */
    public fun clearModelName() {
      _builder.clearModelName()
    }

    /**
     * <pre>
     * Focal length
     * </pre>
     *
     * <code>float focal_length_mm = 3;</code>
     */
    public var focalLengthMm: kotlin.Float
      @JvmName("getFocalLengthMm")
      get() = _builder.getFocalLengthMm()
      @JvmName("setFocalLengthMm")
      set(value) {
        _builder.setFocalLengthMm(value)
      }
    /**
     * ```
     * Focal length
     * ```
     *
     * `float focal_length_mm = 3;`
     */
    public fun clearFocalLengthMm() {
      _builder.clearFocalLengthMm()
    }

    /**
     * <pre>
     * Horizontal sensor size
     * </pre>
     *
     * <code>float horizontal_sensor_size_mm = 4;</code>
     */
    public var horizontalSensorSizeMm: kotlin.Float
      @JvmName("getHorizontalSensorSizeMm")
      get() = _builder.getHorizontalSensorSizeMm()
      @JvmName("setHorizontalSensorSizeMm")
      set(value) {
        _builder.setHorizontalSensorSizeMm(value)
      }
    /**
     * ```
     * Horizontal sensor size
     * ```
     *
     * `float horizontal_sensor_size_mm = 4;`
     */
    public fun clearHorizontalSensorSizeMm() {
      _builder.clearHorizontalSensorSizeMm()
    }

    /**
     * <pre>
     * Vertical sensor size
     * </pre>
     *
     * <code>float vertical_sensor_size_mm = 5;</code>
     */
    public var verticalSensorSizeMm: kotlin.Float
      @JvmName("getVerticalSensorSizeMm")
      get() = _builder.getVerticalSensorSizeMm()
      @JvmName("setVerticalSensorSizeMm")
      set(value) {
        _builder.setVerticalSensorSizeMm(value)
      }
    /**
     * ```
     * Vertical sensor size
     * ```
     *
     * `float vertical_sensor_size_mm = 5;`
     */
    public fun clearVerticalSensorSizeMm() {
      _builder.clearVerticalSensorSizeMm()
    }

    /**
     * <pre>
     * Horizontal image resolution in pixels
     * </pre>
     *
     * <code>uint32 horizontal_resolution_px = 6;</code>
     */
    public var horizontalResolutionPx: kotlin.Int
      @JvmName("getHorizontalResolutionPx")
      get() = _builder.getHorizontalResolutionPx()
      @JvmName("setHorizontalResolutionPx")
      set(value) {
        _builder.setHorizontalResolutionPx(value)
      }
    /**
     * ```
     * Horizontal image resolution in pixels
     * ```
     *
     * `uint32 horizontal_resolution_px = 6;`
     */
    public fun clearHorizontalResolutionPx() {
      _builder.clearHorizontalResolutionPx()
    }

    /**
     * <pre>
     * Vertical image resolution in pixels
     * </pre>
     *
     * <code>uint32 vertical_resolution_px = 7;</code>
     */
    public var verticalResolutionPx: kotlin.Int
      @JvmName("getVerticalResolutionPx")
      get() = _builder.getVerticalResolutionPx()
      @JvmName("setVerticalResolutionPx")
      set(value) {
        _builder.setVerticalResolutionPx(value)
      }
    /**
     * ```
     * Vertical image resolution in pixels
     * ```
     *
     * `uint32 vertical_resolution_px = 7;`
     */
    public fun clearVerticalResolutionPx() {
      _builder.clearVerticalResolutionPx()
    }
  }
}
public inline fun io.mavsdk.camera.CameraProto.Information.copy(block: `io.mavsdk.camera`.InformationKt.Dsl.() -> kotlin.Unit): io.mavsdk.camera.CameraProto.Information =
  `io.mavsdk.camera`.InformationKt.Dsl._create(this.toBuilder()).apply { block() }._build()

