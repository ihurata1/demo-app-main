// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/camera_server/camera_server.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.camera_server;

@kotlin.jvm.JvmName("-initializetrackRectangle")
public inline fun trackRectangle(block: io.mavsdk.camera_server.TrackRectangleKt.Dsl.() -> kotlin.Unit): io.mavsdk.camera_server.CameraServerProto.TrackRectangle =
  io.mavsdk.camera_server.TrackRectangleKt.Dsl._create(io.mavsdk.camera_server.CameraServerProto.TrackRectangle.newBuilder()).apply { block() }._build()
/**
 * ```
 * Rectangle description type
 * ```
 *
 * Protobuf type `mavsdk.rpc.camera_server.TrackRectangle`
 */
public object TrackRectangleKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.camera_server.CameraServerProto.TrackRectangle.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.camera_server.CameraServerProto.TrackRectangle.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.camera_server.CameraServerProto.TrackRectangle = _builder.build()

    /**
     * <pre>
     * Top left corner of rectangle x value (normalized 0..1, 0 is left, 1 is right).
     * </pre>
     *
     * <code>float top_left_corner_x = 1;</code>
     */
    public var topLeftCornerX: kotlin.Float
      @JvmName("getTopLeftCornerX")
      get() = _builder.getTopLeftCornerX()
      @JvmName("setTopLeftCornerX")
      set(value) {
        _builder.setTopLeftCornerX(value)
      }
    /**
     * ```
     * Top left corner of rectangle x value (normalized 0..1, 0 is left, 1 is right).
     * ```
     *
     * `float top_left_corner_x = 1;`
     */
    public fun clearTopLeftCornerX() {
      _builder.clearTopLeftCornerX()
    }

    /**
     * <pre>
     * Top left corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom).
     * </pre>
     *
     * <code>float top_left_corner_y = 2;</code>
     */
    public var topLeftCornerY: kotlin.Float
      @JvmName("getTopLeftCornerY")
      get() = _builder.getTopLeftCornerY()
      @JvmName("setTopLeftCornerY")
      set(value) {
        _builder.setTopLeftCornerY(value)
      }
    /**
     * ```
     * Top left corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom).
     * ```
     *
     * `float top_left_corner_y = 2;`
     */
    public fun clearTopLeftCornerY() {
      _builder.clearTopLeftCornerY()
    }

    /**
     * <pre>
     * Bottom right corner of rectangle x value (normalized 0..1, 0 is left, 1 is right).
     * </pre>
     *
     * <code>float bottom_right_corner_x = 3;</code>
     */
    public var bottomRightCornerX: kotlin.Float
      @JvmName("getBottomRightCornerX")
      get() = _builder.getBottomRightCornerX()
      @JvmName("setBottomRightCornerX")
      set(value) {
        _builder.setBottomRightCornerX(value)
      }
    /**
     * ```
     * Bottom right corner of rectangle x value (normalized 0..1, 0 is left, 1 is right).
     * ```
     *
     * `float bottom_right_corner_x = 3;`
     */
    public fun clearBottomRightCornerX() {
      _builder.clearBottomRightCornerX()
    }

    /**
     * <pre>
     * Bottom right corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom).
     * </pre>
     *
     * <code>float bottom_right_corner_y = 4;</code>
     */
    public var bottomRightCornerY: kotlin.Float
      @JvmName("getBottomRightCornerY")
      get() = _builder.getBottomRightCornerY()
      @JvmName("setBottomRightCornerY")
      set(value) {
        _builder.setBottomRightCornerY(value)
      }
    /**
     * ```
     * Bottom right corner of rectangle y value (normalized 0..1, 0 is top, 1 is bottom).
     * ```
     *
     * `float bottom_right_corner_y = 4;`
     */
    public fun clearBottomRightCornerY() {
      _builder.clearBottomRightCornerY()
    }
  }
}
public inline fun io.mavsdk.camera_server.CameraServerProto.TrackRectangle.copy(block: `io.mavsdk.camera_server`.TrackRectangleKt.Dsl.() -> kotlin.Unit): io.mavsdk.camera_server.CameraServerProto.TrackRectangle =
  `io.mavsdk.camera_server`.TrackRectangleKt.Dsl._create(this.toBuilder()).apply { block() }._build()

