// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/ftp_server/ftp_server.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.ftp_server;

@kotlin.jvm.JvmName("-initializesetRootDirRequest")
public inline fun setRootDirRequest(block: io.mavsdk.ftp_server.SetRootDirRequestKt.Dsl.() -> kotlin.Unit): io.mavsdk.ftp_server.FtpServerProto.SetRootDirRequest =
  io.mavsdk.ftp_server.SetRootDirRequestKt.Dsl._create(io.mavsdk.ftp_server.FtpServerProto.SetRootDirRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `mavsdk.rpc.ftp_server.SetRootDirRequest`
 */
public object SetRootDirRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.ftp_server.FtpServerProto.SetRootDirRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.ftp_server.FtpServerProto.SetRootDirRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.ftp_server.FtpServerProto.SetRootDirRequest = _builder.build()

    /**
     * ```
     * Absolute path of folder
     * ```
     *
     * `string path = 1;`
     */
    public var path: kotlin.String
      @JvmName("getPath")
      get() = _builder.getPath()
      @JvmName("setPath")
      set(value) {
        _builder.setPath(value)
      }
    /**
     * ```
     * Absolute path of folder
     * ```
     *
     * `string path = 1;`
     */
    public fun clearPath() {
      _builder.clearPath()
    }
  }
}
public inline fun io.mavsdk.ftp_server.FtpServerProto.SetRootDirRequest.copy(block: `io.mavsdk.ftp_server`.SetRootDirRequestKt.Dsl.() -> kotlin.Unit): io.mavsdk.ftp_server.FtpServerProto.SetRootDirRequest =
  `io.mavsdk.ftp_server`.SetRootDirRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

