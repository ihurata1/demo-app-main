// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/telemetry_server/telemetry_server.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.telemetry_server;

@kotlin.jvm.JvmName("-initializeangularVelocityFrd")
public inline fun angularVelocityFrd(block: io.mavsdk.telemetry_server.AngularVelocityFrdKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry_server.TelemetryServerProto.AngularVelocityFrd =
  io.mavsdk.telemetry_server.AngularVelocityFrdKt.Dsl._create(io.mavsdk.telemetry_server.TelemetryServerProto.AngularVelocityFrd.newBuilder()).apply { block() }._build()
/**
 * ```
 * AngularVelocityFrd message type.
 * ```
 *
 * Protobuf type `mavsdk.rpc.telemetry_server.AngularVelocityFrd`
 */
public object AngularVelocityFrdKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.telemetry_server.TelemetryServerProto.AngularVelocityFrd.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.telemetry_server.TelemetryServerProto.AngularVelocityFrd.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.telemetry_server.TelemetryServerProto.AngularVelocityFrd = _builder.build()

    /**
     * <pre>
     * Angular velocity in forward direction in radians per second
     * </pre>
     *
     * <code>float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var forwardRadS: kotlin.Float
      @JvmName("getForwardRadS")
      get() = _builder.getForwardRadS()
      @JvmName("setForwardRadS")
      set(value) {
        _builder.setForwardRadS(value)
      }
    /**
     * ```
     * Angular velocity in forward direction in radians per second
     * ```
     *
     * `float forward_rad_s = 1 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearForwardRadS() {
      _builder.clearForwardRadS()
    }

    /**
     * <pre>
     * Angular velocity in right direction in radians per second
     * </pre>
     *
     * <code>float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var rightRadS: kotlin.Float
      @JvmName("getRightRadS")
      get() = _builder.getRightRadS()
      @JvmName("setRightRadS")
      set(value) {
        _builder.setRightRadS(value)
      }
    /**
     * ```
     * Angular velocity in right direction in radians per second
     * ```
     *
     * `float right_rad_s = 2 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearRightRadS() {
      _builder.clearRightRadS()
    }

    /**
     * <pre>
     * Angular velocity in Down direction in radians per second
     * </pre>
     *
     * <code>float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];</code>
     */
    public var downRadS: kotlin.Float
      @JvmName("getDownRadS")
      get() = _builder.getDownRadS()
      @JvmName("setDownRadS")
      set(value) {
        _builder.setDownRadS(value)
      }
    /**
     * ```
     * Angular velocity in Down direction in radians per second
     * ```
     *
     * `float down_rad_s = 3 [(.mavsdk.options.default_value) = "NaN"];`
     */
    public fun clearDownRadS() {
      _builder.clearDownRadS()
    }
  }
}
public inline fun io.mavsdk.telemetry_server.TelemetryServerProto.AngularVelocityFrd.copy(block: `io.mavsdk.telemetry_server`.AngularVelocityFrdKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry_server.TelemetryServerProto.AngularVelocityFrd =
  `io.mavsdk.telemetry_server`.AngularVelocityFrdKt.Dsl._create(this.toBuilder()).apply { block() }._build()

