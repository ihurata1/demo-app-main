// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/telemetry_server/telemetry_server.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.telemetry_server;

@kotlin.jvm.JvmName("-initializescaledPressure")
public inline fun scaledPressure(block: io.mavsdk.telemetry_server.ScaledPressureKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry_server.TelemetryServerProto.ScaledPressure =
  io.mavsdk.telemetry_server.ScaledPressureKt.Dsl._create(io.mavsdk.telemetry_server.TelemetryServerProto.ScaledPressure.newBuilder()).apply { block() }._build()
/**
 * ```
 * Scaled Pressure message type.
 * ```
 *
 * Protobuf type `mavsdk.rpc.telemetry_server.ScaledPressure`
 */
public object ScaledPressureKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.telemetry_server.TelemetryServerProto.ScaledPressure.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.telemetry_server.TelemetryServerProto.ScaledPressure.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.telemetry_server.TelemetryServerProto.ScaledPressure = _builder.build()

    /**
     * <pre>
     * Timestamp (time since system boot)
     * </pre>
     *
     * <code>uint64 timestamp_us = 1;</code>
     */
    public var timestampUs: kotlin.Long
      @JvmName("getTimestampUs")
      get() = _builder.getTimestampUs()
      @JvmName("setTimestampUs")
      set(value) {
        _builder.setTimestampUs(value)
      }
    /**
     * ```
     * Timestamp (time since system boot)
     * ```
     *
     * `uint64 timestamp_us = 1;`
     */
    public fun clearTimestampUs() {
      _builder.clearTimestampUs()
    }

    /**
     * <pre>
     * Absolute pressure in hPa
     * </pre>
     *
     * <code>float absolute_pressure_hpa = 2;</code>
     */
    public var absolutePressureHpa: kotlin.Float
      @JvmName("getAbsolutePressureHpa")
      get() = _builder.getAbsolutePressureHpa()
      @JvmName("setAbsolutePressureHpa")
      set(value) {
        _builder.setAbsolutePressureHpa(value)
      }
    /**
     * ```
     * Absolute pressure in hPa
     * ```
     *
     * `float absolute_pressure_hpa = 2;`
     */
    public fun clearAbsolutePressureHpa() {
      _builder.clearAbsolutePressureHpa()
    }

    /**
     * <pre>
     * Differential pressure 1 in hPa
     * </pre>
     *
     * <code>float differential_pressure_hpa = 3;</code>
     */
    public var differentialPressureHpa: kotlin.Float
      @JvmName("getDifferentialPressureHpa")
      get() = _builder.getDifferentialPressureHpa()
      @JvmName("setDifferentialPressureHpa")
      set(value) {
        _builder.setDifferentialPressureHpa(value)
      }
    /**
     * ```
     * Differential pressure 1 in hPa
     * ```
     *
     * `float differential_pressure_hpa = 3;`
     */
    public fun clearDifferentialPressureHpa() {
      _builder.clearDifferentialPressureHpa()
    }

    /**
     * <pre>
     * Absolute pressure temperature (in celsius)
     * </pre>
     *
     * <code>float temperature_deg = 4;</code>
     */
    public var temperatureDeg: kotlin.Float
      @JvmName("getTemperatureDeg")
      get() = _builder.getTemperatureDeg()
      @JvmName("setTemperatureDeg")
      set(value) {
        _builder.setTemperatureDeg(value)
      }
    /**
     * ```
     * Absolute pressure temperature (in celsius)
     * ```
     *
     * `float temperature_deg = 4;`
     */
    public fun clearTemperatureDeg() {
      _builder.clearTemperatureDeg()
    }

    /**
     * <pre>
     * Differential pressure temperature (in celsius, 0 if not available)
     * </pre>
     *
     * <code>float differential_pressure_temperature_deg = 5;</code>
     */
    public var differentialPressureTemperatureDeg: kotlin.Float
      @JvmName("getDifferentialPressureTemperatureDeg")
      get() = _builder.getDifferentialPressureTemperatureDeg()
      @JvmName("setDifferentialPressureTemperatureDeg")
      set(value) {
        _builder.setDifferentialPressureTemperatureDeg(value)
      }
    /**
     * ```
     * Differential pressure temperature (in celsius, 0 if not available)
     * ```
     *
     * `float differential_pressure_temperature_deg = 5;`
     */
    public fun clearDifferentialPressureTemperatureDeg() {
      _builder.clearDifferentialPressureTemperatureDeg()
    }
  }
}
public inline fun io.mavsdk.telemetry_server.TelemetryServerProto.ScaledPressure.copy(block: `io.mavsdk.telemetry_server`.ScaledPressureKt.Dsl.() -> kotlin.Unit): io.mavsdk.telemetry_server.TelemetryServerProto.ScaledPressure =
  `io.mavsdk.telemetry_server`.ScaledPressureKt.Dsl._create(this.toBuilder()).apply { block() }._build()

