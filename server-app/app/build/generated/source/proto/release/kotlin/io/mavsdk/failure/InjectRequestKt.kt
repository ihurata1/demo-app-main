// Generated by the protocol buffer compiler. DO NOT EDIT!
// source: mavsdk/failure/failure.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.mavsdk.failure;

@kotlin.jvm.JvmName("-initializeinjectRequest")
public inline fun injectRequest(block: io.mavsdk.failure.InjectRequestKt.Dsl.() -> kotlin.Unit): io.mavsdk.failure.FailureProto.InjectRequest =
  io.mavsdk.failure.InjectRequestKt.Dsl._create(io.mavsdk.failure.FailureProto.InjectRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `mavsdk.rpc.failure.InjectRequest`
 */
public object InjectRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.mavsdk.failure.FailureProto.InjectRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.mavsdk.failure.FailureProto.InjectRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.mavsdk.failure.FailureProto.InjectRequest = _builder.build()

    /**
     * ```
     * The failure unit to send
     * ```
     *
     * `.mavsdk.rpc.failure.FailureUnit failure_unit = 1;`
     */
    public var failureUnit: io.mavsdk.failure.FailureProto.FailureUnit
      @JvmName("getFailureUnit")
      get() = _builder.getFailureUnit()
      @JvmName("setFailureUnit")
      set(value) {
        _builder.setFailureUnit(value)
      }
    public var failureUnitValue: kotlin.Int
      @JvmName("getFailureUnitValue")
      get() = _builder.getFailureUnitValue()
      @JvmName("setFailureUnitValue")
      set(value) {
        _builder.setFailureUnitValue(value)
      }
    /**
     * ```
     * The failure unit to send
     * ```
     *
     * `.mavsdk.rpc.failure.FailureUnit failure_unit = 1;`
     */
    public fun clearFailureUnit() {
      _builder.clearFailureUnit()
    }

    /**
     * ```
     * The failure type to send
     * ```
     *
     * `.mavsdk.rpc.failure.FailureType failure_type = 2;`
     */
    public var failureType: io.mavsdk.failure.FailureProto.FailureType
      @JvmName("getFailureType")
      get() = _builder.getFailureType()
      @JvmName("setFailureType")
      set(value) {
        _builder.setFailureType(value)
      }
    public var failureTypeValue: kotlin.Int
      @JvmName("getFailureTypeValue")
      get() = _builder.getFailureTypeValue()
      @JvmName("setFailureTypeValue")
      set(value) {
        _builder.setFailureTypeValue(value)
      }
    /**
     * ```
     * The failure type to send
     * ```
     *
     * `.mavsdk.rpc.failure.FailureType failure_type = 2;`
     */
    public fun clearFailureType() {
      _builder.clearFailureType()
    }

    /**
     * <pre>
     * Instance to affect (0 for all)
     * </pre>
     *
     * <code>int32 instance = 3;</code>
     */
    public var instance: kotlin.Int
      @JvmName("getInstance")
      get() = _builder.getInstance()
      @JvmName("setInstance")
      set(value) {
        _builder.setInstance(value)
      }
    /**
     * ```
     * Instance to affect (0 for all)
     * ```
     *
     * `int32 instance = 3;`
     */
    public fun clearInstance() {
      _builder.clearInstance()
    }
  }
}
public inline fun io.mavsdk.failure.FailureProto.InjectRequest.copy(block: `io.mavsdk.failure`.InjectRequestKt.Dsl.() -> kotlin.Unit): io.mavsdk.failure.FailureProto.InjectRequest =
  `io.mavsdk.failure`.InjectRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

